import{_ as s,c as i,o as a,a7 as t}from"./chunks/framework.DLSH1pMh.js";const n="/assets/image.C8_IM87l.png",y=JSON.parse('{"title":"Shader初学","description":"","frontmatter":{"title":"Shader初学","date":"2025-10-23T00:00:00.000Z","categories":["技术探索"],"tags":["GLSL","shader","threejs"]},"headers":[],"relativePath":"blogs/note/20251023-shader初学.md","filePath":"blogs/note/20251023-shader初学.md"}'),l={name:"blogs/note/20251023-shader初学.md"},h=t(`<h1 id="shader初学" tabindex="-1">Shader初学 <a class="header-anchor" href="#shader初学" aria-label="Permalink to &quot;Shader初学&quot;">​</a></h1><h2 id="使用-glslcanvas-来练习创建shader" tabindex="-1">使用 glslCanvas 来练习创建shader <a class="header-anchor" href="#使用-glslcanvas-来练习创建shader" aria-label="Permalink to &quot;使用 glslCanvas 来练习创建shader&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/javascript&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://rawgit.com/patriciogonzalezvivo/glslCanvas/master/dist/GlslCanvas.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者 npm install glslCanvas</span></span></code></pre></div><p>然后就可以使用 glslCanvas 来创建shader</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Document&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/javascript&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://rawgit.com/patriciogonzalezvivo/glslCanvas/master/dist/GlslCanvas.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">canvas</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;glslCanvas&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-fragment-url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a.frag&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-textures</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;500&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;500&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">canvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>创建一个 a.frag 文件，并写入以下代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#ifdef </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GL_ES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">precision mediump float;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uniform float u_time;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uniform vec2 u_resolution;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 归一化像素坐标</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec2 st </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl_FragCoord.xy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u_resolution;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 创建一个随时间变化的渐变色</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec3 color1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec3 color2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用sin函数创建时间动画</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    float mixValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(u_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 混合两个颜色</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec3 finalColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(color1, color2, mixValue);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 添加一些基于位置的变化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    finalColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(st.x, st.y, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gl_FragColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(finalColor, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="swizzling-分量混合-语法-glsl-的超级语法糖" tabindex="-1">Swizzling（分量混合）语法：GLSL 的超级语法糖 <a class="header-anchor" href="#swizzling-分量混合-语法-glsl-的超级语法糖" aria-label="Permalink to &quot;Swizzling（分量混合）语法：GLSL 的超级语法糖&quot;">​</a></h2><p>GLSL 支持一种非常独特的语法，叫 Swizzle（混合访问）。 它允许你用任意组合 .xyzw / .rgba / .stpq 访问、重排、复制向量分量。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vec4 v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 单个分量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.x;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.w;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 提取多个分量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vec2 c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.xy;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (1.0, 2.0)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vec3 d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.xyz; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (1.0, 2.0, 3.0)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重新排序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vec3 e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.zyx; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (3.0, 2.0, 1.0)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vec4 f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.yxzw; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (2.0, 1.0, 3.0, 4.0)</span></span></code></pre></div><h2 id="内置变量-varying" tabindex="-1">内置变量 varying <a class="header-anchor" href="#内置变量-varying" aria-label="Permalink to &quot;内置变量 varying&quot;">​</a></h2><h3 id="gl-fragcoord" tabindex="-1">gl_FragCoord <a class="header-anchor" href="#gl-fragcoord" aria-label="Permalink to &quot;gl_FragCoord&quot;">​</a></h3><p><code>gl_FragCoord</code> 是一个内置的 <code>vec4</code> 向量, 他的四个分量分别表示：</p><ul><li><code>x</code>: 当前片段在屏幕上的横坐标（像素），左下角处为 0，向右递增</li><li><code>y</code>: 当前片段在屏幕上的纵坐标（像素），左下角处为 0，向上递增</li><li><code>z</code>: 片段的深度值（0 到 1）</li><li><code>w</code>: 齐次坐标的 w 分量（很少直接用）</li></ul><p><strong>常用场景</strong></p><ol><li>计算归一化坐标（标准化屏幕坐标） u_resolution 是你从 JS 前端 传入 shader 的一个 uniform（<strong>全局只读变量</strong>）。一般表示<strong>画布的像素尺寸</strong>。</li></ol><p><strong>注意</strong>：在 WebGL 中，虽然 HTML Canvas 的 2D 坐标系原点在左上角，但 shader 中的坐标系原点在左下角。这是 GPU 级别的标准。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vec2 st </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl_FragCoord.xy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> u_resolution; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这样可以归一化成(0,0)在左下角，(1,1)在右上角</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">st.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> st.y;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这样 (0,0) 就变成左上角了。</span></span></code></pre></div><ol start="2"><li>用来做图案、渐变、噪声</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl_FragColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(st.x, st.y, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>这会根据像素坐标生成一个从黑到白的渐变背景。</p><ol start="3"><li>在后期处理中计算像素位置 在屏幕后处理（postprocessing）里，例如模糊、辉光、边缘检测， <code>gl_FragCoord</code> 可用来知道当前 fragment 对应的屏幕坐标， 然后用这个坐标在纹理中采样。</li></ol><h2 id="常用函数" tabindex="-1">常用函数 <a class="header-anchor" href="#常用函数" aria-label="Permalink to &quot;常用函数&quot;">​</a></h2><h3 id="step-与-smoothstep" tabindex="-1">Step 与 Smoothstep <a class="header-anchor" href="#step-与-smoothstep" aria-label="Permalink to &quot;Step 与 Smoothstep&quot;">​</a></h3><ol><li><code>smoothstep(edge0, edge1, x)</code>： 对 x 做平滑插值（抗锯齿）：</li></ol><ul><li>当 <code>x &lt;= edge0 </code>-&gt; 返回 0.0；</li><li>当 <code>x &gt;= edge1</code> -&gt; 返回 1.0；</li><li>在 <code>edge0..edge1</code> 之间平滑过渡（使用三次 Hermite 曲线）。</li></ul><ol start="2"><li><code>step(edge, x)</code>：对 x 做线性插值：</li></ol><ul><li>当 <code>x &lt; edge</code> -&gt; 返回 0.0；</li><li>当 <code>x &gt;= edge</code> -&gt; 返回 1.0。</li></ul><h3 id="数学函数" tabindex="-1">数学函数 <a class="header-anchor" href="#数学函数" aria-label="Permalink to &quot;数学函数&quot;">​</a></h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>pow(a,b)</code></td><td>返回 a 的 b 次幂: <code>a^b</code></td></tr><tr><td><code>sqrt(a)</code></td><td>返回 a 的平方根: <code>a^0.5</code></td></tr><tr><td><code>abs(x)</code></td><td>返回 x 的绝对值</td></tr><tr><td><code>mod(x,0.5)</code></td><td>返回 x 对 0.5 取模的值</td></tr><tr><td><code>fract(x)</code></td><td>返回 x 的小数部分</td></tr><tr><td><code>ceil(x)</code></td><td>向正无穷取整</td></tr><tr><td><code>floor(x)</code></td><td>向负无穷取整</td></tr><tr><td><code>sign(x)</code></td><td>提取 x 的正负号</td></tr><tr><td><code>clamp(x,min,max)</code></td><td>把 x 的值限制在 min 和 max 之间</td></tr><tr><td><code>min(x,y)</code></td><td>返回 x 和 y 中的较小值</td></tr><tr><td><code>max(x,y)</code></td><td>返回 x 和 y 中的较大值</td></tr><tr><td><code>mix(x,y,a)</code></td><td>返回 a 乘以 x + (1-a) 乘以 y</td></tr><tr><td><code>length(a)</code></td><td>返回 a 的长度: <code>sqrt(a.x*a.x + a.y*a.y + a.z*a.z)</code></td></tr><tr><td><code>distance(a,b)</code></td><td>返回 a 和 b 的距离: <code>length(a-b)</code></td></tr><tr><td><code>dot(a,b)</code></td><td>返回 a 和 b 的点积: <code>a.x*b.x + a.y*b.y + a.z*b.z</code></td></tr><tr><td><code>normalize(a)</code></td><td>返回 a 的单位向量: <code>a/length(a)</code></td></tr><tr><td><code>cross(a,b)</code></td><td>叉积: <code>a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.x</code></td></tr><tr><td><code>faceforward(a,b)</code></td><td>返回 a 和 b 的方向: <code>dot(a,b) &gt;= 0.0 ? 1.0 : -1.0</code></td></tr><tr><td><code>reflect(a,b)</code></td><td>镜面反射: <code>a - 2.0 * dot(a,b) * b</code></td></tr><tr><td><code>refract(a,b,eta)</code></td><td>折射: <code>eta * a - (eta * dot(a,b) + sqrt(1.0 - eta*eta * (1.0 - dot(a,b)*dot(a,b)))) * b</code></td></tr><tr><td><code>lessThan(a,b)</code></td><td>测试 a 是否小于 b</td></tr><tr><td><code>lessThanEqual(a,b)</code></td><td>测试 a 是否小于等于 b</td></tr><tr><td><code>greaterThan(a,b)</code></td><td>测试 a 是否大于 b</td></tr><tr><td><code>greaterThanEqual(a,b)</code></td><td>测试 a 是否大于等于 b</td></tr><tr><td><code>equal(a,b)</code></td><td>测试 a 是否等于 b</td></tr><tr><td><code>notEqual(a,b)</code></td><td>测试 a 是否不等于 b</td></tr></tbody></table><p><img src="`+n+'" alt="一些常用函数公示表"></p>',31),e=[h];function k(p,d,r,E,g,o){return a(),i("div",null,e)}const F=s(l,[["render",k]]);export{y as __pageData,F as default};
