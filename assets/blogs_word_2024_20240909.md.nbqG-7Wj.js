import{_ as e,c as a,o as s,a3 as i}from"./chunks/framework.DpzXWsSh.js";const _=JSON.parse('{"title":"脚手架开发-Englighten CLI","description":"","frontmatter":{"title":"脚手架开发-Englighten CLI","date":"2024-9-09","categories":["工程化"]},"headers":[],"relativePath":"blogs/word/2024/20240909.md","filePath":"blogs/word/2024/20240909.md"}'),o={name:"blogs/word/2024/20240909.md"},t=i('<h2 id="脚手架开发-englighten-cli" tabindex="-1">脚手架开发-Englighten CLI <a class="header-anchor" href="#脚手架开发-englighten-cli" aria-label="Permalink to &quot;脚手架开发-Englighten CLI&quot;">​</a></h2><h3 id="初探脚手架开发" tabindex="-1">初探脚手架开发 <a class="header-anchor" href="#初探脚手架开发" aria-label="Permalink to &quot;初探脚手架开发&quot;">​</a></h3><h4 id="深入理解cli和gui" tabindex="-1">深入理解CLI和GUI <a class="header-anchor" href="#深入理解cli和gui" aria-label="Permalink to &quot;深入理解CLI和GUI&quot;">​</a></h4><p><strong>什么是CLI</strong> 命令行界面（CLI）是一种基于文本界面（类似：MacOS终端、Windows cmd.exe），用于运行程序 CLI接收键盘输入，在命令符号提示处输入命令，然后由计算机执行并返回结果 大部分操作系统都会以GUI为基础，但是基于Unix的系统都会同时提供CLI和GUI</p><p><strong>总结</strong></p><ul><li>Shell是操作系统提供的接口程序，用于接收用户输入的命令，交给操作系统内核执行并接受响应结果</li><li>Bash是Shell的一个实现，用于执行用户输入的命令</li><li>CLI是Bash的运行环境，CLI接收用户键盘输入，交给Bash执行，并将程序处理结果，结果以文本形式进行显示</li></ul><h4 id="脚手架的执行原理" tabindex="-1">脚手架的执行原理 <a class="header-anchor" href="#脚手架的执行原理" aria-label="Permalink to &quot;脚手架的执行原理&quot;">​</a></h4><p>脚手架本质是一个操作系统的客户端，他通过命令行执行，比如：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-project</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://registry.npmjs.org</span></span></code></pre></div><p>上述从左到右依次为：主命令 command command参数 option配置</p><p>当我们执行vue的时候，在macos中相当于执行了<code>which vue</code>，windows中相当于执行了<code>where vue</code>，用于找到在Node.js的bin目录下的vue，这个vue是一个软连接，指向了<code>lib/node_modules/vue-cli-service/bin/vue.js</code>,然后终端利用node执行了这个js文件，vue.js通过解析command/option，找到对应的命令，然后执行命令，最后返回结果</p><p><strong>Node其实是一个客户端</strong> macOS中，<code>which node</code>我们可以发现他是一个软连接，windows中我们也可以查看node是一个exe文件，我们平时执行<code>node test.js</code>，其实是把test.js中的代码当成一个字符串，传给了node.exe，然后node进行解析，把它当成一个可执行文件进行解析，最后返回结果，我们也可以输入<code>node -e &quot;console.log(&#39;hello world&#39;)&quot;</code>，这样也可以执行</p>',12),n=[t];function l(d,h,c,r,p,g){return s(),a("div",null,n)}const k=e(o,[["render",l]]);export{_ as __pageData,k as default};
