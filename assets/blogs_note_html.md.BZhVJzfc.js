import{_ as l,c as i,o as e,a3 as t}from"./chunks/framework.DpzXWsSh.js";const o="/assets/pic1.BEeA5Tpi.jpg",s="/assets/pic2.BWFPupwh.png",a="/assets/pic3.U-jp-VRQ.jpg",c="/assets/pic4.B4E2dqKN.jpg",d="/assets/pic5.D1_ZQNbg.jpg",r="/assets/pic6.BNwBV30Z.jpg",n="/assets/pic7.ClXXN03D.jpg",q=JSON.parse('{"title":"HTML基础","description":"","frontmatter":{"title":"HTML基础","date":"2021-01-01T00:00:00.000Z","categories":["html","笔记"]},"headers":[],"relativePath":"blogs/note/html.md","filePath":"blogs/note/html.md"}'),p={name:"blogs/note/html.md"},g=t('<p><strong>本人通过blog的形式把自己以前的学习笔记整理了一下，持续更新</strong></p><h2 id="基础知识" tabindex="-1">基础知识 <a class="header-anchor" href="#基础知识" aria-label="Permalink to &quot;基础知识&quot;">​</a></h2><ol><li><p><strong>块元素、行内元素、行内块元素的区别</strong></p><ul><li><p>块元素<code>h1-h6,p,div,ul,ol,li</code></p><ul><li>特点： <ol><li>比较霸道，自己独占一行</li><li>高度，宽度，外边距和内边距都可以控制</li><li>宽度默认是父容器的100%</li><li>是一个容器及盒子，里面可以放行内或者块元素</li><li>注意文字类元素内不能使用块级元素</li><li>h1-h6，P元素中不能放任何块元素</li></ol></li></ul></li><li><p>行内元素<code>a,strong,b,em,I,del,s,ins,u,span</code></p><ul><li>特点： <ol><li>相邻行内元素在一行上，一行可以显示多个</li><li>高，宽直接设置是无效的</li><li>默认宽度就是它本身内容的宽度</li><li>行内元素内只能放文本或者其他行内元素</li><li>链接里面不能放链接，特殊情况a里面可以放块级元素，给a转换块级模式最安全</li></ol></li></ul></li><li><p>行内块元素<code>img，input，td</code></p><ul><li>特点： <ol><li>他们<strong>同时具有块元素和行内元素的特点</strong></li><li>相邻行内块在一行上，他们之间会有<strong>空白缝隙</strong></li><li>默认宽度就是它本身内容的宽度</li><li>高度，行高，外边距和内边距都可以控制</li></ol></li></ul></li></ul></li><li><p><strong>语义化问题</strong></p><ul><li>什么时候需要用语义化标签 <ol><li>强seo需求（搜索引擎会通过语义化标签增强文章的SEO搜索）</li><li>需要支持屏幕阅读器（屏幕阅读器是根据标签理解语义和段落的）</li><li>视觉呈现重要程度较低的程序（色彩搭配，元素构成，文字排版应用，留白技巧等方面的要求比较低）</li></ol></li><li>语义化标签好处 <ol><li>便于机器和人类阅读</li><li>便于搜索引擎搜索</li><li>自然语境的补充</li><li>结构化文档的分级</li><li>支持屏幕阅读器软件</li><li>根据屏幕可以自动生成目录</li></ol></li><li>分类 <ol><li>结构类：<code>header，footer，aside，section，nav，article，main</code></li><li>语义类：<code>em，b，q，s，u，mark，figure，cite，del，alt，title，name</code>等属性也对seo有影响</li></ol></li><li>注意： <ol><li>这种语义化标准主要是针对搜索引擎的</li><li>这些新标签页面中可以使用多次</li><li>在IE9中，需要把这些元素转换为块级元素</li><li>其实，我们移动端更喜欢使用这些标签</li></ol></li></ul></li></ol><h2 id="主体知识" tabindex="-1">主体知识 <a class="header-anchor" href="#主体知识" aria-label="Permalink to &quot;主体知识&quot;">​</a></h2><ol><li><strong>超链接</strong><ul><li>href属性：指定跳转的目标路径，值可以是外部网站也可以是内部页面地址；开发中可以用#（跳转顶部位置）或者<code>javascript：；</code>来作为占位符使用；如果需要跳转指定位置，可以将href值设置（#目标id）</li><li>target属性：<code>_self</code>默认值:当前页面打开超链接<br><code>_blank</code>:在新页面打开超链接</li></ul></li></ol><p><img src="'+o+'" alt=""><br> 2. <strong>列表</strong><br><img src="'+s+'" alt=""><br> 3. <strong>图片</strong><br> Img自结束标签，属于行内块元素<br> 属性：</p><ol><li>src：指定外部图片的路径，和超链接一样</li><li>alt：图片的描述，默认情况下不显示，浏览器无法加载图片时显示，<strong>搜索引擎会根据alt的内容来识别图片</strong>，如果不写alt属性则图片不会被搜索引擎所识别</li><li>width，height设置一个另一个等比例缩放</li><li>title：鼠标悬停时的文字</li></ol><ul><li>图片的格式： <ul><li>jpeg(jpg): 支持的颜色比较丰富，不支持透明效果，不支持动图-一般用来显示照片</li><li>gif: 支持的颜色比较少，支持简单透明，支持动图-颜色单一的图片，动图</li><li>png: 支持的颜色丰富，支持复杂透明，不支持动图,复杂透明图片（专为网页而生）</li><li>webp: <ul><li>这种格式是谷歌新推出的专门用来表示网页中的图片的一种格式</li><li>它具备其他图片格式的所有优点,而且文件还特别的小</li><li>缺点:兼容性不好</li></ul></li><li>base64: <ul><li>将图片使用base64编码，这样可以将图片转换为字符，通过字符的形式来引用</li><li>—般都是一些需要和网页一起加载的图片才会使用base64</li></ul></li></ul></li></ul><ol start="4"><li><strong>表格</strong></li></ol><ul><li><code>&lt;table&gt; &lt;/table&gt;</code>是用于定义表格的标签。</li><li><code>&lt;tr&gt; &lt;/tr&gt;</code>标签用于定义表格中的行，必须嵌套在<code>&lt;table&gt; &lt;/table&gt;</code>标签中。</li><li><code>&lt;td&gt; &lt;/td&gt;</code>用于定义表格中的单元格，必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中。</li><li>字母<code>td</code>指表格数据(table data)，即数据单元格的内容。</li><li><code>th</code>是表头部分需要居中加粗的<code>td</code><br><strong>属性：设置给<code>table</code></strong><br><img src="'+a+'" alt=""><br><strong>设置细线边框：border-collapse: collapse;</strong></li></ul><p><strong>属性：设置给td</strong></p><ul><li>横向（跨列）合并单元格：colspan</li><li>纵向（跨行）合并单元格：rowspan<br> 确定跨行还是跨列合并，找到目标单元格加上属性，并且<strong>删除</strong> 多余的单元格表格的结构标签.</li></ul><ol><li>thead表头区域</li><li>tbody表格主体区域，<strong>浏览器会自动创建tbody包裹tr，tr不是table的子元素</strong></li><li>tfoot表格底部区域</li></ol><h3 id="将元素display设置为table-table-row-table-cell作用" tabindex="-1">将元素display设置为table，table-row，table-cell作用 <a class="header-anchor" href="#将元素display设置为table-table-row-table-cell作用" aria-label="Permalink to &quot;将元素display设置为table，table-row，table-cell作用&quot;">​</a></h3><ol><li><p><code>display：table，padding</code>设置会失效</p></li><li><p><code>display：table-row，margin</code>和<code>padding</code>设置会失效</p></li><li><p><code>display：table-cell，margin</code>设置会失效</p></li><li><p>认识了上面的设置的作用和注意点以后，我们可以发现可以通过<code>display:table-cell</code>和<code>vertical-align:middle</code>; 来<strong>进行垂直居中设置</strong>的,也是运用了<code>cell</code>时，<code>vertical-align</code>属性生效作用。</p></li><li><p><strong>表单</strong><br> 一个完整的表单分为：表单域，表单控件（元素），提示信息</p></li><li><p>表单域：<code>form</code>标签定义表单域，以实现用户信息的收集和传递</p></li><li><p>表单元素</p></li></ol><ul><li><code>input</code>表单元素<br><code>type</code>属性值：<code>text，password，radio，submit，button，checkbox，hidden，reset</code><br><img src="'+c+'" alt=""><br><img src="'+d+'" alt=""><br><img src="'+r+'" alt=""></li><li><strong>可以通过以下方式修改placeholder里面的字体颜色</strong></li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">::placeholder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span></code></pre></div><ul><li><code>label</code>标签 <ol><li><code>label</code>标签为<code>input</code>元素定义标注（标签)。</li><li><code>label</code>标签用于绑定一个表单元素当点击<code>label</code>标签内的文本时，浏览器就会自动将焦点(光标)转到或老选择对应的表单元素上用来增加用户体验.</li><li><code>&lt;label for=&quot;sex&quot;&gt;男&lt;/label&gt;</code></li><li><code>&lt;input type=&quot;radio&quot; name=&quot;sex&quot;id=&quot;sex&quot;/&gt;</code></li></ol></li><li><code>select</code>下拉表单元素 <ol><li><code>select</code>中至少包含一对<code>option</code>。</li><li>在<code>option</code>中定义<code>selected = &quot;selected&quot;</code>时，当前项即为默认选中项。</li><li><code>datalist </code>非强制选择下拉菜单，可自己输入，用<code>type=text</code>引导，加上<code>list（text属性）</code>与<code>id（datalist属性）</code></li></ol></li><li><code>texarea</code>文本域<br><img src="'+n+'" alt=""></li></ul>',18),b=[g];function h(u,m,_,k,y,f){return e(),i("div",null,b)}const x=l(p,[["render",h]]);export{q as __pageData,x as default};
