import{_ as s,c as i,o as a,a7 as n}from"./chunks/framework.DLSH1pMh.js";const t="/assets/01.DyxNeF4Y.png",l="/assets/02.yPAVEGnF.png",F=JSON.parse('{"title":"NodeJS从零到一开发一个全栈项目 - 基础配置篇","description":"","frontmatter":{"title":"NodeJS从零到一开发一个全栈项目 - 基础配置篇","date":"2025-05-16T00:00:00.000Z","categories":["前端进阶","工作随记","javascript"]},"headers":[],"relativePath":"blogs/word/2025/20250516.md","filePath":"blogs/word/2025/20250516.md"}'),h={name:"blogs/word/2025/20250516.md"},e=n(`<h2 id="🚀-使用-express-脚手架创建项目" tabindex="-1">🚀 使用 Express 脚手架创建项目 <a class="header-anchor" href="#🚀-使用-express-脚手架创建项目" aria-label="Permalink to &quot;🚀 使用 Express 脚手架创建项目&quot;">​</a></h2><p>Express是Node.js最流行的Web应用框架，它提供了强大的功能来快速构建Web应用和API。使用Express Generator可以快速生成项目骨架，大大提升开发效率。</p><h3 id="📦-第一步-安装-express-generator" tabindex="-1">📦 第一步：安装 Express Generator <a class="header-anchor" href="#📦-第一步-安装-express-generator" aria-label="Permalink to &quot;📦 第一步：安装 Express Generator&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> express-generator@4</span></span></code></pre></div><h3 id="🏗️-第二步-创建项目" tabindex="-1">🏗️ 第二步：创建项目 <a class="header-anchor" href="#🏗️-第二步-创建项目" aria-label="Permalink to &quot;🏗️ 第二步：创建项目&quot;">​</a></h3><p>Express Generator提供了多种项目创建方式，根据不同需求选择合适的模板：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用EJS模板引擎创建项目（适合需要服务端渲染的应用）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">express</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --view=ejs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 不使用视图模板创建项目（适合纯API开发）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">express</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-view</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo</span></span></code></pre></div><p><strong>创建选项说明：</strong></p><ul><li><code>--view=ejs</code>：使用EJS模板引擎，视图文件存放在views目录下，适合传统的服务端渲染应用</li><li><code>--no-view</code>：不使用任何视图模板，专门用于后台API开发，前端页面渲染交给React、Vue等前端框架处理</li></ul><h3 id="⚡-第三步-启动项目" tabindex="-1">⚡ 第三步：启动项目 <a class="header-anchor" href="#⚡-第三步-启动项目" aria-label="Permalink to &quot;⚡ 第三步：启动项目&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><h3 id="🔄-第四步-配置热重载开发环境" tabindex="-1">🔄 第四步：配置热重载开发环境 <a class="header-anchor" href="#🔄-第四步-配置热重载开发环境" aria-label="Permalink to &quot;🔄 第四步：配置热重载开发环境&quot;">​</a></h3><p>在开发阶段，每次修改代码都需要手动重启服务会很麻烦。使用nodemon可以实现文件变化时自动重启服务：</p><ol><li><strong>安装nodemon</strong>：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodemon</span></span></code></pre></div><ol start="2"><li><strong>修改启动脚本</strong>： 在<code>package.json</code>文件中，将scripts下的启动命令进行修改：</li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原始配置</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node ./bin/www&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改为</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nodemon ./bin/www&quot;</span></span></code></pre></div><ol start="3"><li><strong>重新启动项目</strong>：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><p>现在当您修改代码时，服务会自动重启，极大提升开发体验。</p><h2 id="🐳-docker-环境配置" tabindex="-1">🐳 Docker 环境配置 <a class="header-anchor" href="#🐳-docker-环境配置" aria-label="Permalink to &quot;🐳 Docker 环境配置&quot;">​</a></h2><p>Docker是现代开发中不可或缺的容器化技术，它能够提供一致的开发环境，避免&quot;在我机器上能跑&quot;的问题。在本项目中，我们将使用Docker来运行MySQL数据库服务。</p><h3 id="🚨-docker-镜像下载问题解决方案" tabindex="-1">🚨 Docker 镜像下载问题解决方案 <a class="header-anchor" href="#🚨-docker-镜像下载问题解决方案" aria-label="Permalink to &quot;🚨 Docker 镜像下载问题解决方案&quot;">​</a></h3><p><strong>问题背景：</strong> 根据最新情况，国内 Docker 镜像源普遍出现访问问题，包括阿里云镜像源已限制为仅在阿里云服务器上使用。</p><h4 id="方案一-使用可用镜像源-⭐️" tabindex="-1">方案一：使用可用镜像源 ⭐️ <a class="header-anchor" href="#方案一-使用可用镜像源-⭐️" aria-label="Permalink to &quot;方案一：使用可用镜像源 ⭐️&quot;">​</a></h4><p>目前发现的可用镜像源配置：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;registry-mirrors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;https://docker.1ms.run&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="方案二-配置代理访问-🔧" tabindex="-1">方案二：配置代理访问 🔧 <a class="header-anchor" href="#方案二-配置代理访问-🔧" aria-label="Permalink to &quot;方案二：配置代理访问 🔧&quot;">​</a></h4><p>如果上述镜像源失效，可以通过配置VPN代理来解决：</p><ol><li>在Docker Desktop中打开设置</li><li>进入Resources → Proxies</li><li>配置代理服务器地址和端口</li></ol><p><img src="`+t+'" alt="Docker代理配置"></p><p>配置完成后重启Docker服务，即可正常拉取镜像。</p><h4 id="方案三-laragon-集成环境替代方案-💡" tabindex="-1">方案三：Laragon 集成环境替代方案 💡 <a class="header-anchor" href="#方案三-laragon-集成环境替代方案-💡" aria-label="Permalink to &quot;方案三：Laragon 集成环境替代方案 💡&quot;">​</a></h4><p><strong>适用场景：</strong> 无法安装Docker或代理配置困难的开发者</p><p>Laragon是一个轻量级的本地开发环境，集成了Apache、MySQL、PHP等服务，可以作为Docker的替代方案。</p><ul><li><strong>下载地址</strong>：<a href="https://clwy.cn/tools/laragon" target="_blank" rel="noreferrer">Laragon官方网站</a></li><li><strong>特点</strong>：一键安装、免配置、资源占用少</li></ul><p><img src="'+l+`" alt="Laragon界面"></p><p><strong>⚠️ 重要配置说明：</strong></p><p>由于Laragon的MySQL默认没有密码，在后续配置数据库连接时，需要修改<code>config/config.json</code>文件：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;development&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意：这里是null值，不要加引号！</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;database&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clwy_api_development&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dialect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mysql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;timezone&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;+08:00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;logQueryParameters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><strong>注意事项：</strong> password字段设置为null时，不要添加引号，否则会被识别为字符串&quot;null&quot;而非空值。</p></blockquote><h3 id="🔧-windows系统docker启动问题完整解决方案" tabindex="-1">🔧 Windows系统Docker启动问题完整解决方案 <a class="header-anchor" href="#🔧-windows系统docker启动问题完整解决方案" aria-label="Permalink to &quot;🔧 Windows系统Docker启动问题完整解决方案&quot;">​</a></h3><p>当在Windows系统中遇到<code>Docker Engine Stopped</code>错误时，通常是由于系统配置或虚拟化设置问题导致的。以下是完整的排查和解决步骤：</p><h4 id="步骤一-检查windows版本兼容性-🔍" tabindex="-1">步骤一：检查Windows版本兼容性 🔍 <a class="header-anchor" href="#步骤一-检查windows版本兼容性-🔍" aria-label="Permalink to &quot;步骤一：检查Windows版本兼容性 🔍&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 Win + R 打开运行对话框，输入 winver 查看系统版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winver</span></span></code></pre></div><p><strong>系统要求：</strong> Windows版本Build必须 &gt;=19044，这是运行WSL2的最低要求。如果版本过低，需要先升级Windows系统。</p><h4 id="步骤二-启用必要的windows功能-✅" tabindex="-1">步骤二：启用必要的Windows功能 ✅ <a class="header-anchor" href="#步骤二-启用必要的windows功能-✅" aria-label="Permalink to &quot;步骤二：启用必要的Windows功能 ✅&quot;">​</a></h4><p>在控制面板 → 程序和功能 → 启动或关闭Windows功能中，确保以下功能已启用：</p><ul><li>✅ <strong>Hyper-V</strong>（虚拟化平台）</li><li>✅ <strong>虚拟机平台</strong></li><li>✅ <strong>Windows Subsystem for Linux</strong></li></ul><p><strong>如果系统没有Hyper-V选项</strong>，可以通过脚本强制启用：</p><ol><li>创建文本文件，复制以下内容：</li></ol><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pushd </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%~dp0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dir /b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SystemRoot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\servicing\\Packages\\</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hyper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">V</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.mum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hyper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v.txt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i in (</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&#39;findstr /i . hyper-v.txt 2^&gt;nul&#39;) do dism /online /norestart /add-package:&quot;%SystemRoot%\\servicing\\Packages\\%%i&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">del hyper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v.txt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Dism /online /enable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">feature /featurename:Microsoft</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hyper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">V</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">All /LimitAccess /ALL</span></span></code></pre></div><ol start="2"><li>保存为<code>Hyper.cmd</code>文件</li><li>右键选择&quot;以管理员身份运行&quot;</li></ol><h4 id="步骤三-配置虚拟化启动类型-⚙️" tabindex="-1">步骤三：配置虚拟化启动类型 ⚙️ <a class="header-anchor" href="#步骤三-配置虚拟化启动类型-⚙️" aria-label="Permalink to &quot;步骤三：配置虚拟化启动类型 ⚙️&quot;">​</a></h4><p>在Windows PowerShell（管理员权限）中执行：</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查当前设置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bcdedit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果 hypervisorlaunchtype 不是 auto，则执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bcdedit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">set hypervisorlaunchtype auto</span></span></code></pre></div><p>配置完成后重启计算机。</p><h4 id="步骤四-启用cpu虚拟化-💻" tabindex="-1">步骤四：启用CPU虚拟化 💻 <a class="header-anchor" href="#步骤四-启用cpu虚拟化-💻" aria-label="Permalink to &quot;步骤四：启用CPU虚拟化 💻&quot;">​</a></h4><p><strong>检查虚拟化状态：</strong></p><ol><li>打开任务管理器（Ctrl + Shift + Esc）</li><li>切换到&quot;性能&quot;选项卡</li><li>选择&quot;CPU&quot;，查看右侧是否显示&quot;虚拟化：已启用&quot;</li></ol><p><strong>如果未启用，需要进入BIOS设置：</strong></p><table><thead><tr><th>主板品牌</th><th>进入BIOS按键</th><th>虚拟化设置路径</th></tr></thead><tbody><tr><td>Intel主板</td><td>F2/Del</td><td>高级设置 → CPU → Intel VT-x</td></tr><tr><td>AMD主板</td><td>F2/Del</td><td>高级设置 → CPU配置 → SVM模式</td></tr><tr><td>联想/戴尔</td><td>F1/F12</td><td>安全 → 虚拟化</td></tr></tbody></table><h4 id="步骤五-检查和配置wsl-🐧" tabindex="-1">步骤五：检查和配置WSL 🐧 <a class="header-anchor" href="#步骤五-检查和配置wsl-🐧" aria-label="Permalink to &quot;步骤五：检查和配置WSL 🐧&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查WSL安装状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wsl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果未安装WSL，执行安装命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wsl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 强制关闭WSL服务并重启</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wsl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --shutdown</span></span></code></pre></div><p>安装完成后需要重启系统。</p><h4 id="步骤六-重置docker和wsl-最后手段-🔄" tabindex="-1">步骤六：重置Docker和WSL（最后手段） 🔄 <a class="header-anchor" href="#步骤六-重置docker和wsl-最后手段-🔄" aria-label="Permalink to &quot;步骤六：重置Docker和WSL（最后手段） 🔄&quot;">​</a></h4><p>如果以上步骤都无法解决问题，可以尝试完全重置：</p><ol><li><strong>卸载Docker Desktop</strong></li><li><strong>清理WSL环境</strong>：</li></ol><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在PowerShell（管理员）中执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wsl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unregister DockerDesktop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wsl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unregister Ubuntu    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果安装了Ubuntu发行版</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wsl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unregister docker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">desktop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wsl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unregister docker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">desktop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data</span></span></code></pre></div><ol start="3"><li><strong>重新安装Docker Desktop</strong></li></ol><h3 id="🗂️-docker镜像配置" tabindex="-1">🗂️ Docker镜像配置 <a class="header-anchor" href="#🗂️-docker镜像配置" aria-label="Permalink to &quot;🗂️ Docker镜像配置&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;builder&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;gc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;defaultKeepStorage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;20GB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;enabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;experimental&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;registry-mirrors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;https://docker.1ms.run&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="🐙-使用-docker-compose-管理数据库" tabindex="-1">🐙 使用 Docker Compose 管理数据库 <a class="header-anchor" href="#🐙-使用-docker-compose-管理数据库" aria-label="Permalink to &quot;🐙 使用 Docker Compose 管理数据库&quot;">​</a></h2><p>Docker Compose是Docker的编排工具，可以通过一个YAML文件定义和管理多个容器服务。在本项目中，我们使用它来快速搭建MySQL数据库环境。</p><h3 id="📝-创建配置文件" tabindex="-1">📝 创建配置文件 <a class="header-anchor" href="#📝-创建配置文件" aria-label="Permalink to &quot;📝 创建配置文件&quot;">​</a></h3><p>在项目根目录中创建<code>docker-compose.yml</code>文件：</p><blockquote><p>⚠️ <strong>重要提醒</strong>：文件必须放在项目根目录中，否则Docker无法正确找到配置。</p></blockquote><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  mysql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql:8.3.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      --default-authentication-plugin=mysql_native_password</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      --character-set-server=utf8mb4</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      --collation-server=utf8mb4_general_ci</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MYSQL_ROOT_PASSWORD=clwy1234</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MYSQL_LOWER_CASE_TABLE_NAMES=0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3306:3306&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./data/mysql:/var/lib/mysql</span></span></code></pre></div><p><strong>配置说明：</strong></p><ul><li><code>mysql:8.3.0</code>：使用MySQL 8.3.0版本</li><li><code>--default-authentication-plugin</code>：设置默认认证插件，确保兼容性</li><li><code>--character-set-server=utf8mb4</code>：支持完整的Unicode字符集，包括emoji</li><li><code>MYSQL_ROOT_PASSWORD</code>：设置root用户密码</li><li><code>volumes</code>：数据持久化，将容器内数据映射到本地</li></ul><h3 id="🚀-启动服务" tabindex="-1">🚀 启动服务 <a class="header-anchor" href="#🚀-启动服务" aria-label="Permalink to &quot;🚀 启动服务&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在项目根目录下执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><p>参数说明：</p><ul><li><code>-d</code>：后台运行模式（detached）</li></ul><p>启动成功后，Docker Desktop面板中会显示相应的容器服务。</p><h3 id="⚠️-端口冲突解决方案" tabindex="-1">⚠️ 端口冲突解决方案 <a class="header-anchor" href="#⚠️-端口冲突解决方案" aria-label="Permalink to &quot;⚠️ 端口冲突解决方案&quot;">​</a></h3><p>如果本地已安装MySQL服务，可能会出现3306端口占用冲突：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看端口占用情况</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">netstat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ano</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findstr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :3306</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看占用端口的具体应用程序</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tasklist</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findstr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PID号</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 停止本地MySQL服务（以MySQL80为例）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MySQL80</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 强制结束进程</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">taskkill</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /PID</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6336</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /F</span></span></code></pre></div><h2 id="💾-数据库基础操作" tabindex="-1">💾 数据库基础操作 <a class="header-anchor" href="#💾-数据库基础操作" aria-label="Permalink to &quot;💾 数据库基础操作&quot;">​</a></h2><h3 id="🏗️-创建数据库" tabindex="-1">🏗️ 创建数据库 <a class="header-anchor" href="#🏗️-创建数据库" aria-label="Permalink to &quot;🏗️ 创建数据库&quot;">​</a></h3><p>创建名为<code>clwy_api_development</code>的数据库，配置如下：</p><table><thead><tr><th>配置项</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>Database Encoding</td><td><code>utf8mb4</code></td><td>支持完整Unicode字符集，包括emoji表情</td></tr><tr><td>Database Collation</td><td><code>utf8mb4_general_ci</code></td><td>不区分大小写，不区分重音符号</td></tr></tbody></table><h3 id="📋-数据表命名规范" tabindex="-1">📋 数据表命名规范 <a class="header-anchor" href="#📋-数据表命名规范" aria-label="Permalink to &quot;📋 数据表命名规范&quot;">​</a></h3><p>在创建数据表时，必须遵循以下命名规范：</p><ul><li>✅ <strong>首字母大写</strong>：如<code>Articles</code>、<code>Users</code><ul><li>❌ 错误示例：<code>articles</code>（Linux服务器上会报错）</li></ul></li><li>✅ <strong>使用复数形式</strong>：表名必须以<code>s</code>结尾 <ul><li>❌ 错误示例：<code>Article</code>（Node.js查询时无法找到表）</li></ul></li></ul><h3 id="📊-sql基础操作语法" tabindex="-1">📊 SQL基础操作语法 <a class="header-anchor" href="#📊-sql基础操作语法" aria-label="Permalink to &quot;📊 SQL基础操作语法&quot;">​</a></h3><h4 id="_1️⃣-数据插入-insert" tabindex="-1">1️⃣ 数据插入（INSERT） <a class="header-anchor" href="#_1️⃣-数据插入-insert" aria-label="Permalink to &quot;1️⃣ 数据插入（INSERT）&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 基础语法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名 (列1, 列2, ...) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (值1, 值2, ...);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 单行插入示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Articles\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`title\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`content\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;行路难·其一&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;长风破浪会有时，直挂云帆济沧海。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 批量插入示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Articles\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`title\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`content\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;将进酒&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;天生我材必有用，千金散尽还复来。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;宣州谢朓楼饯别校书叔云&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;抽刀断水水更流，举杯消愁愁更愁。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;梦游天姥吟留别&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;安能摧眉折腰事权贵，使我不得开心颜！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;春夜宴从弟桃花园序&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;天地者，万物之逆旅也；光阴者，百代之过客也。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;庐山谣寄卢侍御虚舟&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;我本楚狂人，凤歌笑孔丘。手持绿玉杖，朝别黄鹤楼。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;望庐山瀑布&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;飞流直下三千尺，疑是银河落九天。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;清平调&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;云想衣裳花想容，春风拂槛露华浓。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;春夜洛城闻笛&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;谁家玉笛暗飞声，散入春风满洛城。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="_2️⃣-数据更新-update" tabindex="-1">2️⃣ 数据更新（UPDATE） <a class="header-anchor" href="#_2️⃣-数据更新-update" aria-label="Permalink to &quot;2️⃣ 数据更新（UPDATE）&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 基础语法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 列1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">值1, 列2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">值2, ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 条件;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 更新示例：修改ID为2的记录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Articles\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`title\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;黄鹤楼送孟浩然之广陵&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    \`content\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;故人西辞黄鹤楼，烟花三月下扬州。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><blockquote><p><strong>安全提示</strong>：WHERE条件必不可少，否则会更新表中所有数据！</p></blockquote><h4 id="_3️⃣-数据删除-delete" tabindex="-1">3️⃣ 数据删除（DELETE） <a class="header-anchor" href="#_3️⃣-数据删除-delete" aria-label="Permalink to &quot;3️⃣ 数据删除（DELETE）&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 基础语法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DELETE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 条件;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 删除示例：删除ID为5的记录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DELETE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Articles\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 删除多条记录示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DELETE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Articles\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><blockquote><p><strong>危险警告</strong>：删除操作不可逆，务必确保WHERE条件正确！</p></blockquote><h4 id="_4️⃣-数据查询-select" tabindex="-1">4️⃣ 数据查询（SELECT） <a class="header-anchor" href="#_4️⃣-数据查询-select" aria-label="Permalink to &quot;4️⃣ 数据查询（SELECT）&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 查询所有数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Articles\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 查询指定字段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`id\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`title\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Articles\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 条件查询</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Articles\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 排序查询</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Articles\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ORDER BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DESC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 降序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Articles\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ORDER BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`id\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ASC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 升序</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 限制数量查询</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Articles\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> LIMIT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;                           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 前5条</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Articles\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> LIMIT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OFFSET </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;                 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 跳过10条，取5条</span></span></code></pre></div><h2 id="🔧-sequelize-orm-框架实用指南" tabindex="-1">🔧 Sequelize ORM 框架实用指南 <a class="header-anchor" href="#🔧-sequelize-orm-框架实用指南" aria-label="Permalink to &quot;🔧 Sequelize ORM 框架实用指南&quot;">​</a></h2><h3 id="🤔-什么是-sequelize" tabindex="-1">🤔 什么是 Sequelize？ <a class="header-anchor" href="#🤔-什么是-sequelize" aria-label="Permalink to &quot;🤔 什么是 Sequelize？&quot;">​</a></h3><p>Sequelize 是 Node.js 中最流行的 ORM（对象关系映射）工具，它的作用就是<strong>让你用 JavaScript 代码操作数据库，而不用写复杂的 SQL 语句</strong>。</p><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[前端表单提交] --&gt; B[后端 API 接收]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; C[Sequelize 操作数据库]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; D[MySQL 数据库]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; E[返回数据给前端]</span></span></code></pre></div><p><strong>简单理解：</strong></p><ul><li>用户注册 → Sequelize 把用户信息存入数据库</li><li>文章列表 → Sequelize 从数据库查询文章返回给前端</li><li>更新资料 → Sequelize 修改数据库中的用户信息</li></ul><h3 id="🚀-三种核心使用场景" tabindex="-1">🚀 三种核心使用场景 <a class="header-anchor" href="#🚀-三种核心使用场景" aria-label="Permalink to &quot;🚀 三种核心使用场景&quot;">​</a></h3><h4 id="场景一-建表-造数据-📊" tabindex="-1">场景一：建表 + 造数据 📊 <a class="header-anchor" href="#场景一-建表-造数据-📊" aria-label="Permalink to &quot;场景一：建表 + 造数据 📊&quot;">​</a></h4><p><strong>步骤1：创建模型和迁移</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建文章模型（会同时生成迁移文件）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> model:generate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Article</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --attributes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> title:string,content:text</span></span></code></pre></div><p><strong>步骤2：执行迁移创建表</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db:migrate</span></span></code></pre></div><p><strong>步骤3：创建测试数据</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成种子文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seed:generate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo-articles</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行种子文件填充数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db:seed:all</span></span></code></pre></div><h4 id="场景二-新增字段迁移-✨" tabindex="-1">场景二：新增字段迁移 ✨ <a class="header-anchor" href="#场景二-新增字段迁移-✨" aria-label="Permalink to &quot;场景二：新增字段迁移 ✨&quot;">​</a></h4><p>假设要给用户表添加头像字段：</p><p><strong>步骤1：创建迁移文件</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> migration:create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add-avatar-to-user</span></span></code></pre></div><p><strong>步骤2：编写迁移代码</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// migrations/xxx-add-avatar-to-user.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> up</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">queryInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Sequelize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> queryInterface.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addColumn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Users&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;avatar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      type: Sequelize.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">STRING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      allowNull: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> down</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">queryInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Sequelize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> queryInterface.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeColumn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Users&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;avatar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><strong>步骤3：执行迁移</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db:migrate</span></span></code></pre></div><p><strong>步骤4：更新模型文件</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// models/user.js 中添加新字段</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sequelize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">DataTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sequelize.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;User&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: DataTypes.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">STRING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    email: DataTypes.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">STRING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    avatar: DataTypes.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">STRING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 🔥 新增这一行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h4 id="场景三-回滚迁移-⏪" tabindex="-1">场景三：回滚迁移 ⏪ <a class="header-anchor" href="#场景三-回滚迁移-⏪" aria-label="Permalink to &quot;场景三：回滚迁移 ⏪&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 回滚最后一次迁移</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db:migrate:undo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 回滚到指定迁移</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db:migrate:undo:to</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 20230101000000-create-user.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 回滚所有迁移（危险操作）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db:migrate:undo:all</span></span></code></pre></div><h3 id="🛠️-常用命令速查表" tabindex="-1">🛠️ 常用命令速查表 <a class="header-anchor" href="#🛠️-常用命令速查表" aria-label="Permalink to &quot;🛠️ 常用命令速查表&quot;">​</a></h3><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><strong>创建模型</strong></td><td><code>sequelize model:generate --name User --attributes name:string,email:string</code></td><td>创建模型和迁移文件</td></tr><tr><td><strong>执行迁移</strong></td><td><code>sequelize db:migrate</code></td><td>应用所有未执行的迁移</td></tr><tr><td><strong>回滚迁移</strong></td><td><code>sequelize db:migrate:undo</code></td><td>回滚最后一次迁移</td></tr><tr><td><strong>创建种子</strong></td><td><code>sequelize seed:generate --name demo-users</code></td><td>生成种子文件</td></tr><tr><td><strong>执行种子</strong></td><td><code>sequelize db:seed:all</code></td><td>填充所有测试数据</td></tr><tr><td><strong>清空种子</strong></td><td><code>sequelize db:seed:undo:all</code></td><td>清空种子数据</td></tr></tbody></table><h3 id="💡-前端开发者必知要点" tabindex="-1">💡 前端开发者必知要点 <a class="header-anchor" href="#💡-前端开发者必知要点" aria-label="Permalink to &quot;💡 前端开发者必知要点&quot;">​</a></h3><h4 id="✅-必须掌握的" tabindex="-1">✅ 必须掌握的 <a class="header-anchor" href="#✅-必须掌握的" aria-label="Permalink to &quot;✅ 必须掌握的&quot;">​</a></h4><ol><li><strong>基本流程</strong>：能够建表、造数据、新增字段</li><li><strong>迁移概念</strong>：知道如何安全地修改数据库结构</li><li><strong>环境区分</strong>：理解开发/测试/生产环境的数据库配置</li></ol><h4 id="⭐-加分技能" tabindex="-1">⭐ 加分技能 <a class="header-anchor" href="#⭐-加分技能" aria-label="Permalink to &quot;⭐ 加分技能&quot;">​</a></h4><ol><li><strong>调试能力</strong>：能查看迁移状态和解决连接问题</li><li><strong>团队协作</strong>：知道如何与后端开发者协作处理数据库变更</li></ol><h4 id="❌-不需要深入的" tabindex="-1">❌ 不需要深入的 <a class="header-anchor" href="#❌-不需要深入的" aria-label="Permalink to &quot;❌ 不需要深入的&quot;">​</a></h4><ol><li>复杂的 SQL 优化</li><li>高级的关联查询</li><li>数据库性能调优</li></ol><h3 id="🔍-实际工作流程示例" tabindex="-1">🔍 实际工作流程示例 <a class="header-anchor" href="#🔍-实际工作流程示例" aria-label="Permalink to &quot;🔍 实际工作流程示例&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 日常开发流程</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # 拉取最新代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 启动本地数据库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db:migrate</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 同步数据库结构</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                     # 启动开发服务器</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 新功能开发</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> model:generate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Comment</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --attributes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> content:text,userId:integer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db:migrate</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 创建新表</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db:seed:all</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 填充测试数据</span></span></code></pre></div><p>通过这些实用场景，你就可以快速上手 Sequelize，进行全栈开发了！ 🚀</p><h3 id="📦-安装和配置sequelize" tabindex="-1">📦 安装和配置Sequelize <a class="header-anchor" href="#📦-安装和配置sequelize" aria-label="Permalink to &quot;📦 安装和配置Sequelize&quot;">​</a></h3><h4 id="步骤一-安装依赖包" tabindex="-1">步骤一：安装依赖包 <a class="header-anchor" href="#步骤一-安装依赖包" aria-label="Permalink to &quot;步骤一：安装依赖包&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 全局安装Sequelize CLI工具</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sequelize-cli</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在项目中安装Sequelize核心包和MySQL驱动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql2</span></span></code></pre></div><h4 id="步骤二-初始化项目" tabindex="-1">步骤二：初始化项目 <a class="header-anchor" href="#步骤二-初始化项目" aria-label="Permalink to &quot;步骤二：初始化项目&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在项目根目录执行初始化</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><p>初始化完成后，项目中会生成以下目录结构：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>project/</span></span>
<span class="line"><span>├── config/          # 配置文件目录</span></span>
<span class="line"><span>│   └── config.json  # 数据库连接配置</span></span>
<span class="line"><span>├── migrations/      # 数据库迁移文件</span></span>
<span class="line"><span>├── models/          # 数据模型文件</span></span>
<span class="line"><span>│   └── index.js     # 模型入口文件</span></span>
<span class="line"><span>└── seeders/         # 数据种子文件</span></span></code></pre></div><p><strong>目录说明：</strong></p><table><thead><tr><th>目录</th><th>作用</th><th>使用场景</th></tr></thead><tbody><tr><td><code>config</code></td><td>存放数据库连接配置</td><td>不同环境的数据库配置</td></tr><tr><td><code>migrations</code></td><td>数据库结构变更记录</td><td>创建表、修改字段、删除表等操作</td></tr><tr><td><code>models</code></td><td>数据模型定义</td><td>定义表结构和数据关系</td></tr><tr><td><code>seeders</code></td><td>测试数据种子</td><td>快速填充测试数据</td></tr></tbody></table><h4 id="步骤三-配置数据库连接" tabindex="-1">步骤三：配置数据库连接 <a class="header-anchor" href="#步骤三-配置数据库连接" aria-label="Permalink to &quot;步骤三：配置数据库连接&quot;">​</a></h4><p>修改<code>config/config.json</code>文件，配置开发环境数据库连接：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;development&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clwy1234&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;database&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clwy_api_development&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dialect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mysql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;timezone&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;+08:00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;define&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;timestamps&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;underscored&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;freezeTableName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clwy1234&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;database&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clwy_api_test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dialect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mysql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;timezone&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;+08:00&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;production&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;your_production_password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;database&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clwy_api_production&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;your_production_host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dialect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mysql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;timezone&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;+08:00&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="🏗️-使用sequelize管理数据表" tabindex="-1">🏗️ 使用Sequelize管理数据表 <a class="header-anchor" href="#🏗️-使用sequelize管理数据表" aria-label="Permalink to &quot;🏗️ 使用Sequelize管理数据表&quot;">​</a></h3><h4 id="创建数据模型" tabindex="-1">创建数据模型 <a class="header-anchor" href="#创建数据模型" aria-label="Permalink to &quot;创建数据模型&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建Article模型和对应的迁移文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> model:generate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Article</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --attributes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> title:string,content:text,authorId:integer</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行数据库迁移，创建实际的数据表</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db:migrate</span></span></code></pre></div><p><strong>命令解析：</strong></p><ul><li><code>--name Article</code>：模型名称（单数形式）</li><li><code>--attributes</code>：字段定义，格式为 <code>字段名:类型</code></li></ul><h4 id="创建测试数据" tabindex="-1">创建测试数据 <a class="header-anchor" href="#创建测试数据" aria-label="Permalink to &quot;创建测试数据&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成种子文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seed:generate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo-articles</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 填充指定种子数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db:seed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --seed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 20250516000000-demo-articles.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 填充所有种子数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db:seed:all</span></span></code></pre></div><h4 id="回滚操作" tabindex="-1">回滚操作 <a class="header-anchor" href="#回滚操作" aria-label="Permalink to &quot;回滚操作&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 回滚最后一次迁移</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db:migrate:undo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 回滚所有迁移</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db:migrate:undo:all</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 回滚种子数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db:seed:undo:all</span></span></code></pre></div><h3 id="🎯-sequelize模型核心概念" tabindex="-1">🎯 Sequelize模型核心概念 <a class="header-anchor" href="#🎯-sequelize模型核心概念" aria-label="Permalink to &quot;🎯 Sequelize模型核心概念&quot;">​</a></h3><h4 id="命名约定" tabindex="-1">命名约定 <a class="header-anchor" href="#命名约定" aria-label="Permalink to &quot;命名约定&quot;">​</a></h4><p>Sequelize遵循特定的命名约定：</p><table><thead><tr><th>类型</th><th>约定</th><th>示例</th></tr></thead><tbody><tr><td>模型名</td><td>单数，首字母大写</td><td><code>Article</code>, <code>User</code>, <code>Category</code></td></tr><tr><td>表名</td><td>复数，全小写</td><td><code>articles</code>, <code>users</code>, <code>categories</code></td></tr><tr><td>字段名</td><td>驼峰命名</td><td><code>firstName</code>, <code>createdAt</code>, <code>userId</code></td></tr></tbody></table><h4 id="数据类型映射" tabindex="-1">数据类型映射 <a class="header-anchor" href="#数据类型映射" aria-label="Permalink to &quot;数据类型映射&quot;">​</a></h4><table><thead><tr><th>Sequelize类型</th><th>MySQL类型</th><th>说明</th></tr></thead><tbody><tr><td><code>STRING</code></td><td><code>VARCHAR(255)</code></td><td>短字符串</td></tr><tr><td><code>TEXT</code></td><td><code>TEXT</code></td><td>长文本</td></tr><tr><td><code>INTEGER</code></td><td><code>INT</code></td><td>整数</td></tr><tr><td><code>BOOLEAN</code></td><td><code>TINYINT(1)</code></td><td>布尔值</td></tr><tr><td><code>DATE</code></td><td><code>DATETIME</code></td><td>日期时间</td></tr><tr><td><code>DECIMAL</code></td><td><code>DECIMAL</code></td><td>精确小数</td></tr></tbody></table><p>这样，我们就完成了从Express项目创建到数据库ORM配置的完整流程。接下来你可以继续添加业务逻辑和API接口开发的内容。</p><h2 id="🤔-配置文件工作机制详解" tabindex="-1">🤔 配置文件工作机制详解 <a class="header-anchor" href="#🤔-配置文件工作机制详解" aria-label="Permalink to &quot;🤔 配置文件工作机制详解&quot;">​</a></h2><p>很多开发者在初次接触这些配置文件时会有疑问：这些文件到底什么时候被读取？它们是如何工作的？让我们详细剖析一下。</p><h3 id="📄-docker-compose-yml-文件工作机制" tabindex="-1">📄 docker-compose.yml 文件工作机制 <a class="header-anchor" href="#📄-docker-compose-yml-文件工作机制" aria-label="Permalink to &quot;📄 docker-compose.yml 文件工作机制&quot;">​</a></h3><h4 id="🕐-什么时候被读取" tabindex="-1">🕐 什么时候被读取？ <a class="header-anchor" href="#🕐-什么时候被读取" aria-label="Permalink to &quot;🕐 什么时候被读取？&quot;">​</a></h4><p><code>docker-compose.yml</code> 文件只在以下情况下被 Docker 引擎读取：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这些命令会读取 docker-compose.yml 文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 启动服务时读取</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # 停止服务时读取</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 构建镜像时读取</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # 查看服务状态时读取</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 查看服务日志时读取</span></span></code></pre></div><h4 id="🔄-工作流程解析" tabindex="-1">🔄 工作流程解析 <a class="header-anchor" href="#🔄-工作流程解析" aria-label="Permalink to &quot;🔄 工作流程解析&quot;">​</a></h4><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[执行 docker-compose up -d] --&gt; B[Docker 读取 docker-compose.yml]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; C[解析服务配置]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; D[拉取 MySQL 镜像]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; E[创建并启动容器]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    E --&gt; F[MySQL 服务运行在 3306 端口]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    G[你的 Node.js 应用启动] --&gt; H[读取 config/config.json]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    H --&gt; I[连接到 localhost:3306]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    I --&gt; J[成功连接到 Docker 中的 MySQL]</span></span></code></pre></div><p><strong>重要理解：</strong></p><ul><li><code>docker-compose.yml</code> 是 <strong>Docker 的配置文件</strong>，不是 Node.js 的</li><li>它只在你执行 <code>docker-compose</code> 命令时才会被读取</li><li>一旦容器启动，这个文件就不会再被读取，除非你重新启动服务</li></ul><h4 id="🎯-实际应用场景" tabindex="-1">🎯 实际应用场景 <a class="header-anchor" href="#🎯-实际应用场景" aria-label="Permalink to &quot;🎯 实际应用场景&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 第一次启动项目</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your-project</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 此时读取 docker-compose.yml，创建 MySQL 容器</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 之后每次开发</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # Node.js 应用启动，读取 config/config.json 连接数据库</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 关闭开发环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 再次读取 docker-compose.yml，停止容器</span></span></code></pre></div><h3 id="⚙️-config-config-json-文件工作机制" tabindex="-1">⚙️ config/config.json 文件工作机制 <a class="header-anchor" href="#⚙️-config-config-json-文件工作机制" aria-label="Permalink to &quot;⚙️ config/config.json 文件工作机制&quot;">​</a></h3><h4 id="🕐-什么时候被读取-1" tabindex="-1">🕐 什么时候被读取？ <a class="header-anchor" href="#🕐-什么时候被读取-1" aria-label="Permalink to &quot;🕐 什么时候被读取？&quot;">​</a></h4><p><code>config/config.json</code> 文件在以下时机被 Sequelize 读取：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当你的 Node.js 应用执行这些操作时</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Sequelize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sequelize&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 应用启动时，Sequelize 初始化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sequelize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sequelize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config.development);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 读取配置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 执行 Sequelize CLI 命令时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequelize </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:migrate        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 读取配置连接数据库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequelize </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:all       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 读取配置连接数据库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequelize </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:generate    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 读取配置（虽然不连数据库）</span></span></code></pre></div><h4 id="🔄-详细工作流程" tabindex="-1">🔄 详细工作流程 <a class="header-anchor" href="#🔄-详细工作流程" aria-label="Permalink to &quot;🔄 详细工作流程&quot;">​</a></h4><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[Node.js 应用启动] --&gt; B[加载 models/index.js]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; C[读取 config/config.json]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; D[根据 NODE_ENV 选择环境]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; E[development/test/production]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    E --&gt; F[使用配置连接数据库]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    F --&gt; G[建立数据库连接池]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    G --&gt; H[应用可以操作数据库]</span></span></code></pre></div><h4 id="📋-环境变量机制" tabindex="-1">📋 环境变量机制 <a class="header-anchor" href="#📋-环境变量机制" aria-label="Permalink to &quot;📋 环境变量机制&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// models/index.js 中的逻辑（Sequelize 自动生成）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 确定环境</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/../config/config.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[env];  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 读取对应环境配置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不同环境下的配置选择</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开发环境：npm start → NODE_ENV=development → 使用 config.development</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 测试环境：npm test → NODE_ENV=test → 使用 config.test  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生产环境：NODE_ENV=production → 使用 config.production</span></span></code></pre></div><h3 id="🔗-两个配置文件的协作关系" tabindex="-1">🔗 两个配置文件的协作关系 <a class="header-anchor" href="#🔗-两个配置文件的协作关系" aria-label="Permalink to &quot;🔗 两个配置文件的协作关系&quot;">​</a></h3><h4 id="🎭-角色分工" tabindex="-1">🎭 角色分工 <a class="header-anchor" href="#🎭-角色分工" aria-label="Permalink to &quot;🎭 角色分工&quot;">​</a></h4><table><thead><tr><th>配置文件</th><th>负责的工具</th><th>作用阶段</th><th>主要功能</th></tr></thead><tbody><tr><td><code>docker-compose.yml</code></td><td>Docker Engine</td><td><strong>基础设施搭建</strong></td><td>创建数据库服务器</td></tr><tr><td><code>config/config.json</code></td><td>Sequelize ORM</td><td><strong>应用层连接</strong></td><td>连接到数据库服务器</td></tr></tbody></table><h4 id="🏗️-完整的工作时序" tabindex="-1">🏗️ 完整的工作时序 <a class="header-anchor" href="#🏗️-完整的工作时序" aria-label="Permalink to &quot;🏗️ 完整的工作时序&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 第1步：启动基础设施（Docker读取docker-compose.yml）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Docker创建MySQL容器，监听3306端口</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 第2步：创建数据库和表结构（Sequelize读取config.json）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db:migrate</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Sequelize连接到localhost:3306，执行建表SQL</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 第3步：启动应用（Node.js读取config.json）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 应用连接到localhost:3306，开始处理业务逻辑</span></span></code></pre></div><h3 id="💡-常见误区和最佳实践" tabindex="-1">💡 常见误区和最佳实践 <a class="header-anchor" href="#💡-常见误区和最佳实践" aria-label="Permalink to &quot;💡 常见误区和最佳实践&quot;">​</a></h3><h4 id="❌-常见误区" tabindex="-1">❌ 常见误区 <a class="header-anchor" href="#❌-常见误区" aria-label="Permalink to &quot;❌ 常见误区&quot;">​</a></h4><ol><li><strong>端口配置不一致</strong></li></ol><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># docker-compose.yml 中</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3307:3306&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 映射到本地3307端口</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># config.json 中还写着</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3306</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # ❌ 应该改为3307</span></span></code></pre></div><ol start="2"><li><strong>环境变量混淆</strong></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 错误理解：认为docker-compose.yml会读取NODE_ENV</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">production</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # ❌ Docker不关心NODE_ENV</span></span></code></pre></div><h4 id="✅-最佳实践" tabindex="-1">✅ 最佳实践 <a class="header-anchor" href="#✅-最佳实践" aria-label="Permalink to &quot;✅ 最佳实践&quot;">​</a></h4><ol><li><strong>保持端口一致性</strong></li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// config/config.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;development&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3306</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 与docker-compose.yml中的端口映射一致</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;database&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clwy_api_development&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li><strong>使用环境变量增强安全性</strong></li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;production&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${DB_USERNAME}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${DB_PASSWORD}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;database&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${DB_NAME}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${DB_HOST}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="🔍-调试技巧" tabindex="-1">🔍 调试技巧 <a class="header-anchor" href="#🔍-调试技巧" aria-label="Permalink to &quot;🔍 调试技巧&quot;">​</a></h3><h4 id="验证docker服务状态" tabindex="-1">验证Docker服务状态 <a class="header-anchor" href="#验证docker服务状态" aria-label="Permalink to &quot;验证Docker服务状态&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查容器是否正常运行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查容器日志</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 测试数据库连接</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span></span></code></pre></div><h4 id="验证sequelize配置" tabindex="-1">验证Sequelize配置 <a class="header-anchor" href="#验证sequelize配置" aria-label="Permalink to &quot;验证Sequelize配置&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 测试数据库连接</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db:migrate:status</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看当前环境</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $NODE_ENV</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 手动测试连接（在Node.js中）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;sequelize&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;./config/config.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.development</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sequelize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Sequelize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequelize.authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.then((</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) =&gt; console.log(&#39;连接成功&#39;));</span></span></code></pre></div><p>现在你应该清楚地理解了这两个配置文件的工作机制：<strong>Docker Compose 负责搭建数据库服务器，Sequelize 负责连接和操作这个数据库服务器</strong>。它们在不同的阶段发挥作用，但最终目标是让你的应用能够顺利访问数据库。</p>`,214),p=[e];function k(d,r,o,E,g,c){return a(),i("div",null,p)}const u=s(h,[["render",k]]);export{F as __pageData,u as default};
