import{_ as s,c as i,o as a,a5 as n}from"./chunks/framework.BIhQMg0k.js";const c=JSON.parse('{"title":"有关 CSSTransition 内存泄漏的问题解决","description":"","frontmatter":{"title":"有关 CSSTransition 内存泄漏的问题解决","date":"2024-12-30T00:00:00.000Z","categories":["react","javascript","工作随记","性能优化"],"tags":["React","CSSTransition","内存泄漏","性能优化"]},"headers":[],"relativePath":"blogs/word/2024/20241230.md","filePath":"blogs/word/2024/20241230.md"}'),l={name:"blogs/word/2024/20241230.md"},t=n(`<h1 id="csstransition-内存泄漏问题的深入分析与解决方案" tabindex="-1">CSSTransition 内存泄漏问题的深入分析与解决方案 <a class="header-anchor" href="#csstransition-内存泄漏问题的深入分析与解决方案" aria-label="Permalink to &quot;CSSTransition 内存泄漏问题的深入分析与解决方案&quot;">​</a></h1><p>在使用 React 的 <code>react-transition-group</code> 库进行动画开发时，我们可能会遇到一个常见但不易察觉的内存泄漏问题。本文将深入分析这个问题的原因，并提供有效的解决方案。</p><h2 id="问题背景" tabindex="-1">问题背景 <a class="header-anchor" href="#问题背景" aria-label="Permalink to &quot;问题背景&quot;">​</a></h2><p>在使用 CSSTransition 组件时，如果多个实例共享同一个 <code>nodeRef</code>，可能会导致严重的内存泄漏。这个问题通常表现为：</p><ul><li>页面长时间运行后内存占用持续增长</li><li>页面性能逐渐下降</li><li>浏览器可能最终崩溃</li></ul><h2 id="问题分析" tabindex="-1">问题分析 <a class="header-anchor" href="#问题分析" aria-label="Permalink to &quot;问题分析&quot;">​</a></h2><h3 id="csstransition-的工作原理" tabindex="-1">CSSTransition 的工作原理 <a class="header-anchor" href="#csstransition-的工作原理" aria-label="Permalink to &quot;CSSTransition 的工作原理&quot;">​</a></h3><p>CSSTransition 组件主要通过以下机制工作：</p><ol><li>使用 <code>findDOMNode</code> 获取组件的 DOM 节点</li><li>在组件的生命周期中添加/移除 CSS 类来触发动画</li><li>在动画完成后清理相关 DOM 节点</li></ol><h3 id="为什么共享-noderef-会导致内存泄漏" tabindex="-1">为什么共享 nodeRef 会导致内存泄漏？ <a class="header-anchor" href="#为什么共享-noderef-会导致内存泄漏" aria-label="Permalink to &quot;为什么共享 nodeRef 会导致内存泄漏？&quot;">​</a></h3><p>当多个 CSSTransition 实例共享同一个 nodeRef 时，会出现以下问题：</p><ol><li><strong>DOM 节点识别混乱</strong>：<code>findDOMNode</code> 无法准确区分新旧 DOM 节点</li><li><strong>节点清理失败</strong>：旧的 DOM 节点无法被正确卸载</li><li><strong>内存累积</strong>：未被清理的节点会在内存中累积，形成 detached DOM 节点</li></ol><h2 id="问题示例" tabindex="-1">问题示例 <a class="header-anchor" href="#问题示例" aria-label="Permalink to &quot;问题示例&quot;">​</a></h2><p>以下是一个可能导致内存泄漏的代码示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nodeRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TransitionGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CSSTransition</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{activeIndex}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      classNames</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fade&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      nodeRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{nodeRef}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AnimationWrapper</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nodeRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{nodeRef}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">renderContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(activeIndex)}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AnimationWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CSSTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TransitionGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><h3 id="_1-使用独立的-noderef" tabindex="-1">1. 使用独立的 nodeRef <a class="header-anchor" href="#_1-使用独立的-noderef" aria-label="Permalink to &quot;1. 使用独立的 nodeRef&quot;">​</a></h3><p>为每个可能的动画状态创建独立的 nodeRef：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boundingBoxRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> voxelRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pointCloudRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> coverPageRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getNodeRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (index) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boundingBoxRef;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> voxelRef;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pointCloudRef;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> coverPageRef;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nodeRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getNodeRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(activeIndex);</span></span></code></pre></div><h3 id="_2-更新组件结构" tabindex="-1">2. 更新组件结构 <a class="header-anchor" href="#_2-更新组件结构" aria-label="Permalink to &quot;2. 更新组件结构&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TransitionGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CSSTransition</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{activeIndex}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      classNames</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fade&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      nodeRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{nodeRef}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AnimationWrapper</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nodeRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{nodeRef}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">renderContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(activeIndex)}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AnimationWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CSSTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TransitionGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="如何验证优化效果" tabindex="-1">如何验证优化效果 <a class="header-anchor" href="#如何验证优化效果" aria-label="Permalink to &quot;如何验证优化效果&quot;">​</a></h2><h3 id="_1-使用-chrome-devtools-进行性能分析" tabindex="-1">1. 使用 Chrome DevTools 进行性能分析 <a class="header-anchor" href="#_1-使用-chrome-devtools-进行性能分析" aria-label="Permalink to &quot;1. 使用 Chrome DevTools 进行性能分析&quot;">​</a></h3><h4 id="performance-面板分析" tabindex="-1">Performance 面板分析 <a class="header-anchor" href="#performance-面板分析" aria-label="Permalink to &quot;Performance 面板分析&quot;">​</a></h4><ol><li>打开 Chrome DevTools（F12 或 Cmd+Option+I）</li><li>切换到 Performance 面板</li><li>点击 Record 开始记录</li><li>执行常见操作（如页面切换、动画触发等）</li><li>停止记录并分析报告，特别关注 Memory 部分</li><li>内存泄露表现：</li></ol><ul><li>Listeners：持续增长。</li><li>Documents：持续增长。</li><li>Nodes：持续增长。</li><li>JS Heap：持续增长，没有明显的下降。</li></ul><h4 id="memory-面板分析" tabindex="-1">Memory 面板分析 <a class="header-anchor" href="#memory-面板分析" aria-label="Permalink to &quot;Memory 面板分析&quot;">​</a></h4><ol><li>切换到 Memory 面板</li><li>拍摄初始堆快照（Take snapshot）</li><li>执行可能导致内存泄漏的操作</li><li>拍摄第二个堆快照</li><li>使用 Comparison 模式比较两个快照</li><li>重点检查 Detached DOM 节点数量</li><li>相关参数含义：</li></ol><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>Constructor</td><td>表示对象的构造函数或类型。例如，(compiled code)、(string)、Function 等</td></tr><tr><td># New</td><td>表示在两次堆快照之间，新创建的对象数量</td></tr><tr><td># Deleted</td><td>表示在两次堆快照之间，被删除的对象数量</td></tr><tr><td># Delta</td><td>表示对象数量的净变化，计算公式为：# Delta = # New - # Deleted。如果为正数，表示对象数量增加；如果为负数，表示对象数量减少</td></tr><tr><td>Alloc. Size</td><td>表示新创建的对象占用的内存大小（以字节为单位）</td></tr><tr><td>Freed Size</td><td>表示被删除的对象释放的内存大小（以字节为单位）</td></tr><tr><td>Size Delta</td><td>表示内存的净变化，计算公式为：Size Delta = Alloc. Size - Freed Size。如果为正数，表示内存占用增加；如果为负数，表示内存占用减少</td></tr></tbody></table><h4 id="performance-monitor-实时监控" tabindex="-1">Performance Monitor 实时监控 <a class="header-anchor" href="#performance-monitor-实时监控" aria-label="Permalink to &quot;Performance Monitor 实时监控&quot;">​</a></h4><ol><li>打开 Performance Monitor 面板</li><li>监控 JS Heap Size 和 Nodes 指标</li><li>观察内存使用趋势是否持续增长</li></ol><h3 id="_2-使用-react-devtools-分析" tabindex="-1">2. 使用 React DevTools 分析 <a class="header-anchor" href="#_2-使用-react-devtools-分析" aria-label="Permalink to &quot;2. 使用 React DevTools 分析&quot;">​</a></h3><ol><li>安装 React Developer Tools 浏览器扩展</li><li>在 Components 面板中观察组件生命周期</li><li>检查组件是否正确卸载</li><li>分析组件的重渲染情况</li></ol><h3 id="_3-使用-lighthouse-进行性能审计" tabindex="-1">3. 使用 Lighthouse 进行性能审计 <a class="header-anchor" href="#_3-使用-lighthouse-进行性能审计" aria-label="Permalink to &quot;3. 使用 Lighthouse 进行性能审计&quot;">​</a></h3><ol><li>打开 Lighthouse 面板</li><li>选择 Performance 和 Best Practices 选项</li><li>生成性能报告</li><li>关注内存相关的建议</li></ol><h2 id="常见内存泄漏模式及解决方案" tabindex="-1">常见内存泄漏模式及解决方案 <a class="header-anchor" href="#常见内存泄漏模式及解决方案" aria-label="Permalink to &quot;常见内存泄漏模式及解决方案&quot;">​</a></h2><h3 id="_1-未清理的事件监听器" tabindex="-1">1. 未清理的事件监听器 <a class="header-anchor" href="#_1-未清理的事件监听器" aria-label="Permalink to &quot;1. 未清理的事件监听器&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Clicked&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, handleClick);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, handleClick);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, []);</span></span></code></pre></div><h3 id="_2-未清理的定时器" tabindex="-1">2. 未清理的定时器 <a class="header-anchor" href="#_2-未清理的定时器" aria-label="Permalink to &quot;2. 未清理的定时器&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Tick&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> clearInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, []);</span></span></code></pre></div><h3 id="_3-其他常见问题" tabindex="-1">3. 其他常见问题 <a class="header-anchor" href="#_3-其他常见问题" aria-label="Permalink to &quot;3. 其他常见问题&quot;">​</a></h3><ul><li>未释放的全局变量</li><li>未正确卸载的组件</li><li>闭包中的过期引用</li><li>大量缓存数据未及时清理</li></ul><h2 id="推荐的调试工具" tabindex="-1">推荐的调试工具 <a class="header-anchor" href="#推荐的调试工具" aria-label="Permalink to &quot;推荐的调试工具&quot;">​</a></h2><h3 id="_1-why-did-you-render" tabindex="-1">1. Why Did You Render <a class="header-anchor" href="#_1-why-did-you-render" aria-label="Permalink to &quot;1. Why Did You Render&quot;">​</a></h3><p>用于检测 React 组件的无效渲染：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> whyDidYouRender </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@welldone-software/why-did-you-render&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">whyDidYouRender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(React);</span></span></code></pre></div><h3 id="_2-memlab" tabindex="-1">2. MemLab <a class="header-anchor" href="#_2-memlab" aria-label="Permalink to &quot;2. MemLab&quot;">​</a></h3><p>Facebook 开源的内存泄漏检测工具：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> memlab</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memlab</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --scenario</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">scenario-fil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h3 id="_3-heap-snapshot-analyzer" tabindex="-1">3. Heap Snapshot Analyzer <a class="header-anchor" href="#_3-heap-snapshot-analyzer" aria-label="Permalink to &quot;3. Heap Snapshot Analyzer&quot;">​</a></h3><p>用于分析 Chrome 堆快照：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> heap-snapshot-analyzer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">heap-snapshot-analyzer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snapshot.heapsnapshot</span></span></code></pre></div><h2 id="调试流程建议" tabindex="-1">调试流程建议 <a class="header-anchor" href="#调试流程建议" aria-label="Permalink to &quot;调试流程建议&quot;">​</a></h2><ol><li><p><strong>初步分析</strong></p><ul><li>使用 Chrome DevTools 的 Performance 面板</li><li>观察内存使用趋势</li><li>记录可疑的性能问题</li></ul></li><li><p><strong>深入调查</strong></p><ul><li>使用 Memory 面板拍摄堆快照</li><li>分析 Detached DOM 节点</li><li>使用 React DevTools 检查组件生命周期</li></ul></li><li><p><strong>持续监控</strong></p><ul><li>使用 Performance Monitor 实时监控</li><li>定期进行 Lighthouse 审计</li><li>建立性能基准指标</li></ul></li></ol><h2 id="最佳实践建议" tabindex="-1">最佳实践建议 <a class="header-anchor" href="#最佳实践建议" aria-label="Permalink to &quot;最佳实践建议&quot;">​</a></h2><ol><li>始终为不同的 CSSTransition 实例使用独立的 nodeRef</li><li>定期监控应用的内存使用情况</li><li>在开发阶段就进行内存泄漏测试</li><li>使用 Chrome DevTools 的 Memory 工具进行性能分析</li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>通过为每个 CSSTransition 实例创建独立的 nodeRef，我们可以有效避免内存泄漏问题。这不仅能提升应用的性能，还能确保长期运行时的稳定性。在开发 React 动画时，合理管理 nodeRef 是一个值得注意的重要细节。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://reactcommunity.org/react-transition-group/" target="_blank" rel="noreferrer">React Transition Group 官方文档</a></li><li><a href="https://reactjs.org/docs/react-dom.html#finddomnode" target="_blank" rel="noreferrer">React findDOMNode 文档</a></li><li><a href="https://developers.google.com/web/tools/chrome-devtools/memory-problems" target="_blank" rel="noreferrer">Chrome DevTools Memory 面板使用指南</a></li></ul>`,60),e=[t];function h(k,p,r,d,o,E){return a(),i("div",null,e)}const y=s(l,[["render",h]]);export{c as __pageData,y as default};
