import{_ as a,c as s,o as t,a3 as e}from"./chunks/framework.DpzXWsSh.js";const n="/assets/fommater.CFN7_GLe.jpg",p="/assets/formatter1.a_Rp8QCB.jpg",o="/assets/formatter2.DT4M2_Ku.jpg",f=JSON.parse('{"title":"echarts使用--tooltips的格式化运用","description":"","frontmatter":{"title":"echarts使用--tooltips的格式化运用","date":"2022-7-15","categories":["echarts","踩坑"]},"headers":[],"relativePath":"blogs/word/2022/0715.md","filePath":"blogs/word/2022/0715.md"}'),r={name:"blogs/word/2022/0715.md"},l=e('<h2 id="echarts使用-格式化问题" tabindex="-1">echarts使用--格式化问题 <a class="header-anchor" href="#echarts使用-格式化问题" aria-label="Permalink to &quot;echarts使用--格式化问题&quot;">​</a></h2><p>在使用echarts的时候，遇到了tooltips的格式化问题以及坐标刻度的格式化问题。在翻阅了文档之后也是一头雾水<br> 下面来介绍一下我的两种处理方式</p><h3 id="_1-tooltips的格式化问题" tabindex="-1">1.tooltips的格式化问题 <a class="header-anchor" href="#_1-tooltips的格式化问题" aria-label="Permalink to &quot;1.tooltips的格式化问题&quot;">​</a></h3><h4 id="_1-1字符串模板格式化" tabindex="-1">1.1字符串模板格式化 <a class="header-anchor" href="#_1-1字符串模板格式化" aria-label="Permalink to &quot;1.1字符串模板格式化&quot;">​</a></h4><p>对于提示框官方首推了字符串模板的格式化方法<br><img src="'+n+'" alt="字符串模板规则"><br> 示例：<code>formatter:&#39;{b0}:{c0}&lt;br /&gt;{b1}:{c1}&#39;</code><br> 实操：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>  tooltip.formatter:`{b}&lt;br /&gt;{a0} : {c0}%&lt;br /&gt;{a1} : {c1}%`</span></span></code></pre></div><p>效果图<br><img src="'+p+`" height="400px"><br> 此处的a、b、c对应的具体名自己要获取后端返回数据来测试确定最好，使用字符串模板可以进行简单的数据格式化，但是我没有在此找到符合我要求的格式方式,因此介绍第二种方式</p><h4 id="_1-2回调函数格式化" tabindex="-1">1.2回调函数格式化 <a class="header-anchor" href="#_1-2回调函数格式化" aria-label="Permalink to &quot;1.2回调函数格式化&quot;">​</a></h4><p>回调函数格式化就比较灵活了，可以多种自定义格式内容<br> 实操：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>formatter:params =&gt;{</span></span>
<span class="line"><span>  let res = &quot;&lt;div&gt;&lt;p&gt;&quot; +params[0].axisValue + &quot;&lt;/div&gt;&lt;/p&gt;&quot;</span></span>
<span class="line"><span>  for(let i = 0;i&lt;params.length;i++){</span></span>
<span class="line"><span>    let tempNum = $Fw.util.Format.fmtInterest(Number(params[i],value),2,100)</span></span>
<span class="line"><span>    if(params[i].value &gt; 0){</span></span>
<span class="line"><span>      tempNum = \`&lt;span style=&quot;color:red;&quot;&gt;\` +tempNum + &quot;&lt;/span&gt;&quot;</span></span>
<span class="line"><span>    }else if{</span></span>
<span class="line"><span>      tempNum = \`&lt;span style=&quot;color:green;&quot;&gt;\` +tempNum + &quot;&lt;/span&gt;&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    if(params[i].data !== undefined){</span></span>
<span class="line"><span>      res += &quot;&lt;p&gt;&quot; +params[i].marker + params[i].seriesName + &quot;:&quot; + tempNum</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return res</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>效果图<br><img src="`+o+'" height="400px"><br> 其中<code>$Fw.util.Format.fmtInterest</code>是封装的一个格式化方法，最主要的是获取params里面的各项数据，<code>marker</code>表示的是图例<br> 可以看的出来，回调函数会更加多样化的对tooltip的内容进行格式化</p><h3 id="_2-y轴的格式化问题" tabindex="-1">2.y轴的格式化问题 <a class="header-anchor" href="#_2-y轴的格式化问题" aria-label="Permalink to &quot;2.y轴的格式化问题&quot;">​</a></h3><p>类似于上述回调函数的处理方式</p>',13),i=[l];function c(d,m,h,u,_,g){return t(),s("div",null,i)}const q=a(r,[["render",c]]);export{f as __pageData,q as default};
