import{_ as l,c as e,o as i,a3 as s}from"./chunks/framework.DpzXWsSh.js";const g=JSON.parse('{"title":"wheel事件和scroll事件","description":"","frontmatter":{"title":"wheel事件和scroll事件","date":"2023-7-25","categories":["javascript","踩坑"]},"headers":[],"relativePath":"blogs/word/2023/0725.md","filePath":"blogs/word/2023/0725.md"}'),a={name:"blogs/word/2023/0725.md"},t=s(`<h2 id="wheel事件和scroll事件" tabindex="-1">wheel事件和scroll事件 <a class="header-anchor" href="#wheel事件和scroll事件" aria-label="Permalink to &quot;wheel事件和scroll事件&quot;">​</a></h2><ul><li>前段时间因为需求原因，封装了一个XScroll组件，用于水平滚动元素的展示，但是出现了一个问题：对于笔记本设备的触摸板双指滚动的时候有问题</li><li>因为XScroll是通过将垂直的盒子通过transform水平展示了，所以我们在使用鼠标滚轮上下滚动的时候实际上是元素变换前的上下滑动，视觉效果上给人一种左右滑动的感觉</li><li>但是在触摸板双指滚动的时候，我们在此处想要双指左右滑动来实现左右滑动，是不行的，因为实际上是双指上下滑动才能触发</li><li>为了实现这个需求，我查阅了wheel事件和scroll的区别和联系</li></ul><h3 id="wheel事件" tabindex="-1"><strong>wheel事件</strong> <a class="header-anchor" href="#wheel事件" aria-label="Permalink to &quot;**wheel事件**&quot;">​</a></h3><ol><li>wheel事件是用于检测鼠标滚轮滚动的事件。它通常在以下情况下被触发： <ul><li>用户使用鼠标滚轮滚动时；</li><li>用户通过触摸板操作模拟鼠标滚轮滚动时；</li><li>用户点击滚动条上方或下方的按钮时；</li><li>用户使用键盘上的 PageUp、PageDown、Home、End 等键来模拟滚动。</li><li>需要注意的是，wheel事件还可以检测到一些滚动模拟设备（如触控笔），以及其他设备的滚动操作（如触摸屏上的滑动手势等）</li></ul></li><li>wheel事件的事件对象包含以下常见属性和方法： <ul><li>event.deltaX：鼠标滚轮在水平方向上滚动的距离。</li><li>event.deltaY：鼠标滚轮在垂直方向上滚动的距离</li><li>event.deltaZ：鼠标滚轮在 Z 轴方向上滚动的距离。</li><li>event.deltaMode：滚动的单位。常见的值有：0 表示像素单位，1 表示行单位，2 表示页单位。</li><li>event.preventDefault()：阻止浏览器的默认滚动行为。</li></ul></li></ol><h3 id="scroll事件" tabindex="-1"><strong>scroll事件</strong> <a class="header-anchor" href="#scroll事件" aria-label="Permalink to &quot;**scroll事件**&quot;">​</a></h3><ol><li>scroll事件的事件对象没有特定的常见属性或方法，但是可以使用其他属性和方法来获取和处理滚动相关的信息 <ul><li>element.scrollTop：元素的垂直滚动位置。</li><li>element.scrollLeft：元素的水平滚动位置。</li><li>element.scrollHeight：元素内容的完整高度。</li><li>element.scrollWidth：元素内容的完整宽度。</li></ul></li><li>需要注意的是，scroll事件在滚动时会频繁触发，因此建议在处理该事件时优化代码性能，避免频繁的计算和操作。</li></ol><h3 id="联系与区别" tabindex="-1"><strong>联系与区别</strong> <a class="header-anchor" href="#联系与区别" aria-label="Permalink to &quot;**联系与区别**&quot;">​</a></h3><ol><li>触发顺序上，一般情况下，当用户使用鼠标滚轮滚动时，wheel事件会先于scroll事件触发。但也有一些特殊情况，比如在某些浏览器中，scroll事件可能在wheel事件之前触发，或者某些情况下可能只触发其中一个事件。</li><li>wheel事件在鼠标和触摸板触发的时候也会有所不一样 <ul><li>首先鼠标滚轮触发直接改变的是<code>event.deltaY</code>，触摸板双指左右滑动和上下滑动分别改变的是<code>event.deltaX</code>和<code>event.deltalY</code></li><li>我的鼠标设备改变<code>deltaY</code>单次触发是150，而触摸板则要小很多并且触发频率高，所以很多博客使用以下代码写水平滚动会让人感觉很卡顿</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       box.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;wheel&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          e.currentTarget.scrollLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.deltaY;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span></code></pre></div></li><li>如果你在wheel事件中去改变了scrollTop等值，会导致scroll事件就不触发了</li><li>针对以上问题，优化了一下之前的XScroll的问题，并且增加了触摸屏，触摸板滚动的优化</li></ol>`,8),o=[t];function n(r,h,c,d,p,k){return i(),e("div",null,o)}const u=l(a,[["render",n]]);export{g as __pageData,u as default};
