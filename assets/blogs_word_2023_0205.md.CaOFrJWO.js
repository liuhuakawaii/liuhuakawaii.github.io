import{_ as s,c as i,o as a,a7 as n}from"./chunks/framework.DLSH1pMh.js";const g=JSON.parse('{"title":"函数式编程-触发点击事件","description":"","frontmatter":{"title":"函数式编程-触发点击事件","date":"2023-02-05T00:00:00.000Z","categories":["javascript","工作随记","工具轮子"]},"headers":[],"relativePath":"blogs/word/2023/0205.md","filePath":"blogs/word/2023/0205.md"}'),l={name:"blogs/word/2023/0205.md"},e=n(`<h2 id="函数式编程-触发点击事件" tabindex="-1">函数式编程-触发点击事件 <a class="header-anchor" href="#函数式编程-触发点击事件" aria-label="Permalink to &quot;函数式编程-触发点击事件&quot;">​</a></h2><h3 id="_1-需求背景" tabindex="-1">1. 需求背景 <a class="header-anchor" href="#_1-需求背景" aria-label="Permalink to &quot;1. 需求背景&quot;">​</a></h3><p>在开发一个密码验证组件时，遇到了以下需求：</p><ul><li>组件被唤起时需要自动聚焦到输入框</li><li>自动唤起客户端键盘（原本只能通过手动点击输入框才能唤起）</li></ul><h3 id="_2-解决方案" tabindex="-1">2. 解决方案 <a class="header-anchor" href="#_2-解决方案" aria-label="Permalink to &quot;2. 解决方案&quot;">​</a></h3><p>通过程序模拟点击事件来实现自动唤起键盘，主要使用以下两个 Web API：</p><ul><li><code>Event</code> 构造函数：用于创建自定义事件对象</li><li><code>dispatchEvent()</code> 方法：用于触发事件</li></ul><h3 id="_3-代码实现" tabindex="-1">3. 代码实现 <a class="header-anchor" href="#_3-代码实现" aria-label="Permalink to &quot;3. 代码实现&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建点击事件对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> clickEvent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bubbles: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 事件是否冒泡</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cancelable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 事件是否可以取消</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动聚焦输入框</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$refs.input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 确保元素已获得焦点后再触发点击事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$refs.input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.activeElement) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$refs.input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dispatchEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clickEvent);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在组件中需要实现点击事件处理函数来唤起客户端键盘</span></span></code></pre></div><h3 id="_4-注意事项" tabindex="-1">4. 注意事项 <a class="header-anchor" href="#_4-注意事项" aria-label="Permalink to &quot;4. 注意事项&quot;">​</a></h3><ul><li>需要确保元素已经获得焦点后再触发点击事件</li><li>事件触发是同步的，建议在适当的生命周期钩子中执行</li><li>某些移动端浏览器可能对模拟事件有限制，需要进行兼容性测试</li></ul><h3 id="_5-参考文档" tabindex="-1">5. 参考文档 <a class="header-anchor" href="#_5-参考文档" aria-label="Permalink to &quot;5. 参考文档&quot;">​</a></h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/Event" target="_blank" rel="noreferrer">Event() 构造函数 - MDN</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/dispatchEvent" target="_blank" rel="noreferrer">EventTarget.dispatchEvent() - MDN</a></li></ul>`,13),t=[e];function h(p,k,r,d,c,o){return a(),i("div",null,t)}const _=s(l,[["render",h]]);export{g as __pageData,_ as default};
