import{_ as s,c as a,o as i,a5 as e}from"./chunks/framework.Bx-mEslM.js";const g=JSON.parse('{"title":"ECharts treemap 树形图的滚动实现方案","description":"","frontmatter":{"title":"ECharts treemap 树形图的滚动实现方案","date":"2022-7-22","categories":["echarts","工作随记"]},"headers":[],"relativePath":"blogs/word/2022/0722.md","filePath":"blogs/word/2022/0722.md"}'),l={name:"blogs/word/2022/0722.md"},t=e(`<h2 id="echarts-treemap-树形图的滚动实现方案" tabindex="-1">ECharts treemap 树形图的滚动实现方案 <a class="header-anchor" href="#echarts-treemap-树形图的滚动实现方案" aria-label="Permalink to &quot;ECharts treemap 树形图的滚动实现方案&quot;">​</a></h2><h3 id="问题背景" tabindex="-1">问题背景 <a class="header-anchor" href="#问题背景" aria-label="Permalink to &quot;问题背景&quot;">​</a></h3><p>在使用 ECharts treemap 树形图时，需要实现水平滚动的交互效果。本文将介绍几种尝试方案及最终解决方案。</p><h3 id="方案一-roam-属性-不推荐" tabindex="-1">方案一：roam 属性（不推荐） <a class="header-anchor" href="#方案一-roam-属性-不推荐" aria-label="Permalink to &quot;方案一：roam 属性（不推荐）&quot;">​</a></h3><p>首先尝试使用 ECharts 内置的 <code>roam</code> 属性：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> option</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  series: [{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;treemap&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    roam: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启用缩放和平移</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... 其他配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>roam</code> 属性可选值：</p><ul><li><code>false</code>: 禁用缩放和平移</li><li><code>&#39;scale&#39;</code>/<code>&#39;zoom&#39;</code>: 只启用缩放</li><li><code>&#39;move&#39;</code>/<code>&#39;pan&#39;</code>: 只启用平移</li><li><code>true</code>: 同时启用缩放和平移</li></ul><h3 id="存在的问题" tabindex="-1">存在的问题 <a class="header-anchor" href="#存在的问题" aria-label="Permalink to &quot;存在的问题&quot;">​</a></h3><p>使用 <code>roam</code> 属性存在以下问题：</p><ol><li>平移效果生硬，用户体验不佳</li><li>可以任意方向移动，不符合只需水平滚动的需求</li><li>缺乏滚动条视觉反馈</li></ol><h3 id="方案二-datazoom-尝试-不可行" tabindex="-1">方案二：dataZoom 尝试（不可行） <a class="header-anchor" href="#方案二-datazoom-尝试-不可行" aria-label="Permalink to &quot;方案二：dataZoom 尝试（不可行）&quot;">​</a></h3><p>尝试使用 <code>dataZoom</code> 组件实现滚动，但由于 treemap 没有 x/y 轴，该方案不可行。</p><h3 id="最终方案-css-实现-推荐" tabindex="-1">最终方案：CSS 实现（推荐） <a class="header-anchor" href="#最终方案-css-实现-推荐" aria-label="Permalink to &quot;最终方案：CSS 实现（推荐）&quot;">​</a></h3><p>使用原生 CSS 的 overflow 属性实现水平滚动，简单高效：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.chart-container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 容器宽度 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow-x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 启用水平滚动 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow-y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 禁用垂直滚动 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.chart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">150</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 图表宽度大于容器 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  min-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 最小宽度，防止内容过于拥挤 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ol><li>实现简单，代码量少</li><li>原生滚动体验流畅</li><li>显示标准滚动条，提供良好的视觉反馈</li><li>仅允许水平方向滚动</li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在 ECharts treemap 实现水平滚动时，原生 CSS 方案比 ECharts 内置的 roam 属性更适合，既保证了良好的用户体验，又简化了实现方式。</p><h3 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h3><ul><li><a href="https://echarts.apache.org/zh/option.html#series-treemap" target="_blank" rel="noreferrer">ECharts 配置项文档</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow" target="_blank" rel="noreferrer">CSS overflow 属性</a></li></ul>`,22),h=[t];function n(p,r,k,o,d,c){return i(),a("div",null,h)}const y=s(l,[["render",n]]);export{g as __pageData,y as default};
