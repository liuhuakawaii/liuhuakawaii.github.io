import{_ as s,c as i,o as a,a5 as l}from"./chunks/framework.BIhQMg0k.js";const E=JSON.parse('{"title":"Javascript内存管理 & V8引擎的垃圾回收","description":"","frontmatter":{"title":"Javascript内存管理 & V8引擎的垃圾回收","date":"2024-03-19T00:00:00.000Z","categories":["javascript"]},"headers":[],"relativePath":"blogs/javascript/jstips/20240319.md","filePath":"blogs/javascript/jstips/20240319.md"}'),n={name:"blogs/javascript/jstips/20240319.md"},t=l(`<h1 id="javascript内存管理与v8引擎垃圾回收机制详解-🚀" tabindex="-1">Javascript内存管理与V8引擎垃圾回收机制详解 🚀 <a class="header-anchor" href="#javascript内存管理与v8引擎垃圾回收机制详解-🚀" aria-label="Permalink to &quot;Javascript内存管理与V8引擎垃圾回收机制详解 🚀&quot;">​</a></h1><h2 id="内存在javascript中的存储方式-💾" tabindex="-1">内存在JavaScript中的存储方式 💾 <a class="header-anchor" href="#内存在javascript中的存储方式-💾" aria-label="Permalink to &quot;内存在JavaScript中的存储方式 💾&quot;">​</a></h2><ol><li><p><strong>栈内存（Stack）存储</strong>：</p><ul><li>存储基本数据类型：Number、String、Boolean、Null、Undefined、Symbol、BigInt</li><li>存储对象的引用地址</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存储在栈中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存储在栈中</span></span></code></pre></div></li><li><p><strong>堆内存（Heap）存储</strong>：</p><ul><li>存储引用数据类型：Object、Array、Function等</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对象存储在堆中，引用地址在栈中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数组存储在堆中，引用地址在栈中</span></span></code></pre></div></li></ol><h2 id="v8引擎内存限制-🔧" tabindex="-1">V8引擎内存限制 🔧 <a class="header-anchor" href="#v8引擎内存限制-🔧" aria-label="Permalink to &quot;V8引擎内存限制 🔧&quot;">​</a></h2><ol><li><p><strong>内存上限</strong>：</p><ul><li>64位系统：约1.4GB</li><li>32位系统：约700MB</li></ul></li><li><p><strong>为什么要设置内存限制？</strong></p><ul><li>防止JavaScript占用过多系统内存</li><li>垃圾回收时的性能考虑（回收1.4GB比回收4GB快得多）</li><li>Web场景下通常够用</li></ul></li></ol><h2 id="v8的分代回收机制-♻️" tabindex="-1">V8的分代回收机制 ♻️ <a class="header-anchor" href="#v8的分代回收机制-♻️" aria-label="Permalink to &quot;V8的分代回收机制 ♻️&quot;">​</a></h2><h3 id="新生代-young-generation-👶" tabindex="-1">新生代（Young Generation）👶 <a class="header-anchor" href="#新生代-young-generation-👶" aria-label="Permalink to &quot;新生代（Young Generation）👶&quot;">​</a></h3><ul><li><p><strong>特点</strong>：</p><ul><li>存储生命周期短的对象</li><li>64位系统下约32MB，32位系统下约16MB</li><li>使用Scavenge算法（复制算法）</li></ul></li><li><p><strong>回收过程</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>From Space        To Space</span></span>
<span class="line"><span>[活跃对象] ------&gt; [复制]</span></span>
<span class="line"><span>[垃圾对象]        [空]</span></span></code></pre></div><ol><li>将活跃对象复制到To Space</li><li>清空From Space</li><li>交换From Space和To Space</li></ol></li></ul><h3 id="老生代-old-generation-👴" tabindex="-1">老生代（Old Generation）👴 <a class="header-anchor" href="#老生代-old-generation-👴" aria-label="Permalink to &quot;老生代（Old Generation）👴&quot;">​</a></h3><ul><li><p><strong>特点</strong>：</p><ul><li>存储生命周期长的对象</li><li>占据大部分内存空间</li></ul></li><li><p><strong>回收算法</strong>：Mark-Sweep-Compact（标记-清除-整理）</p><ol><li>标记阶段：标记活跃对象</li><li>清除阶段：清除未标记对象</li><li>整理阶段：整理内存碎片</li></ol></li></ul><h3 id="对象晋升机制-🆙" tabindex="-1">对象晋升机制 🆙 <a class="header-anchor" href="#对象晋升机制-🆙" aria-label="Permalink to &quot;对象晋升机制 🆙&quot;">​</a></h3><p>对象从新生代晋升到老生代的条件：</p><ol><li>对象经过一次Scavenge回收依然存活</li><li>To Space空间使用率超过25%</li></ol><h2 id="常见内存泄漏及优化建议-⚠️" tabindex="-1">常见内存泄漏及优化建议 ⚠️ <a class="header-anchor" href="#常见内存泄漏及优化建议-⚠️" aria-label="Permalink to &quot;常见内存泄漏及优化建议 ⚠️&quot;">​</a></h2><h3 id="_1-全局变量" tabindex="-1">1. 全局变量 <a class="header-anchor" href="#_1-全局变量" aria-label="Permalink to &quot;1. 全局变量&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不推荐</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 推荐</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用完后</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="_2-闭包使用" tabindex="-1">2. 闭包使用 <a class="header-anchor" href="#_2-闭包使用" aria-label="Permalink to &quot;2. 闭包使用&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可能导致内存泄漏</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache[key]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 建议在不需要时手动解除引用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用完后</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="_3-事件监听器" tabindex="-1">3. 事件监听器 <a class="header-anchor" href="#_3-事件监听器" aria-label="Permalink to &quot;3. 事件监听器&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 记得移除不需要的事件监听</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, onClick);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不用时移除</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, onClick);</span></span></code></pre></div><h2 id="node-js特殊配置-🛠️" tabindex="-1">Node.js特殊配置 🛠️ <a class="header-anchor" href="#node-js特殊配置-🛠️" aria-label="Permalink to &quot;Node.js特殊配置 🛠️&quot;">​</a></h2><h3 id="手动触发垃圾回收" tabindex="-1">手动触发垃圾回收 <a class="header-anchor" href="#手动触发垃圾回收" aria-label="Permalink to &quot;手动触发垃圾回收&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 需要添加 --expose-gc 参数启动</span></span></code></pre></div><h3 id="内存配置" tabindex="-1">内存配置 <a class="header-anchor" href="#内存配置" aria-label="Permalink to &quot;内存配置&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置老生代内存上限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --max-old-space-size=4096</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置新生代内存上限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --max-new-space-size=2048</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre></div><h2 id="性能监控建议-📊" tabindex="-1">性能监控建议 📊 <a class="header-anchor" href="#性能监控建议-📊" aria-label="Permalink to &quot;性能监控建议 📊&quot;">​</a></h2><ol><li>使用Chrome DevTools的Memory面板监控内存使用</li><li>定期使用Performance面板检查内存泄漏</li><li>在Node.js中使用<code>process.memoryUsage()</code>监控内存使用情况</li></ol><h2 id="最佳实践总结-✨" tabindex="-1">最佳实践总结 ✨ <a class="header-anchor" href="#最佳实践总结-✨" aria-label="Permalink to &quot;最佳实践总结 ✨&quot;">​</a></h2><ol><li>及时释放不用的引用</li><li>避免过多的全局变量</li><li>谨慎使用闭包</li><li>及时清理定时器和事件监听</li><li>大型对象尽可能复用</li><li>注意避免内存泄漏的代码模式</li></ol>`,29),e=[t];function h(p,k,r,d,o,c){return a(),i("div",null,e)}const y=s(n,[["render",h]]);export{E as __pageData,y as default};
