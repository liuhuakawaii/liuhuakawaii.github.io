import{_ as s,c as i,o as a,a3 as t}from"./chunks/framework.DpzXWsSh.js";const y=JSON.parse('{"title":"WebGL学习笔记","description":"","frontmatter":{"title":"WebGL学习笔记","date":"2024-8-20","categories":["webgl","笔记"]},"headers":[],"relativePath":"blogs/webgl/webgl.md","filePath":"blogs/webgl/webgl.md"}'),h={name:"blogs/webgl/webgl.md"},n=t(`<h1 id="webgl学习笔记" tabindex="-1">WebGL学习笔记 <a class="header-anchor" href="#webgl学习笔记" aria-label="Permalink to &quot;WebGL学习笔记&quot;">​</a></h1><h2 id="着色器glsl-es语言" tabindex="-1">着色器GLSL ES语言 <a class="header-anchor" href="#着色器glsl-es语言" aria-label="Permalink to &quot;着色器GLSL ES语言&quot;">​</a></h2><p>平时接触的JavaScript、C、java等语言是在CPU上执行，对于着色器语言GLSL ES是在显卡GPU上执行</p><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h3><table><thead><tr><th>关键字</th><th>数据类型</th><th>值</th><th>声明方式</th></tr></thead><tbody><tr><td>float</td><td>浮点型</td><td>1.0、0.0、-1.0</td><td>float a = 1.0;</td></tr><tr><td>int</td><td>整型</td><td>1、0、-1</td><td>int a = 1;</td></tr><tr><td>bool</td><td>布尔型</td><td>true、false</td><td>bool a = true;</td></tr><tr><td>vec2</td><td>2维向量</td><td>vec2(1.0, 0.0)</td><td>vec2 a = vec2(1.0, 0.0);</td></tr><tr><td>vec3</td><td>3维向量</td><td>vec3(1.0, 0.0, 0.0)</td><td>vec3 a = vec3(1.0, 0.0, 0.0);</td></tr><tr><td>vec4</td><td>4维向量</td><td>vec4(1.0, 0.0, 0.0, 1.0)</td><td>vec4 a = vec4(1.0, 0.0, 0.0, 1.0);</td></tr><tr><td>ivec2</td><td>2维向量</td><td>ivec2(1, 0)</td><td>ivec2 a = ivec2(1, 0);</td></tr><tr><td>ivec3</td><td>3维向量</td><td>ivec3(1, 0, 0)</td><td>ivec3 a = ivec3(1, 0, 0);</td></tr><tr><td>ivec4</td><td>4维向量</td><td>ivec4(1, 0, 0, 1)</td><td>ivec4 a = ivec4(1, 0, 0, 1);</td></tr><tr><td>bvec2</td><td>2维向量</td><td>bvec2(true, false)</td><td>bvec2 a = bvec2(true, false);</td></tr><tr><td>bvec3</td><td>3维向量</td><td>bvec3(true, false, true)</td><td>bvec3 a = bvec3(true, false, true);</td></tr><tr><td>bvec4</td><td>4维向量</td><td>bvec4(true, false, true, false)</td><td>bvec4 a = bvec4(true, false, true, false);</td></tr></tbody></table><p><strong>声明一个常量const</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.14159265359</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>着色器语言GLSL ES声明函数</strong> 函数计算后,如果需要返回的值，通过关键字return返回，不过注意声明函数时候，函数名称前需要声明return返回值的数据类型。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 两个参数是浮点数，相加后返回值自然也是浮点数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(float x,float y){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>声明一个无返回值函数,函数前面用void关键字即可。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  float x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>向量表示顶点位置坐标</strong> 三维向量vec3表示变量pos具有三个分量，可以用来表示顶点的xyz坐标。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vec3 pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>用四维向量vec4表示齐次坐标，所谓齐次坐标，就是在GLSL ES中表示一个顶点坐标的的时候，增加一个分量，1.0表示。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vec4 pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>一个三维向量转化为四维向量</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vec3 pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vec4 pos4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pos, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="内置变量" tabindex="-1"><strong>内置变量</strong> <a class="header-anchor" href="#内置变量" aria-label="Permalink to &quot;**内置变量**&quot;">​</a></h3><p><strong>所谓内置变量就是着色器语言GLSL ES默认提供的变量，不需要声明，就可以使用</strong></p><table><thead><tr><th>内置变量</th><th>描述</th></tr></thead><tbody><tr><td>gl_Position</td><td>顶点着色器中，表示当前顶点的位置坐标，是vec4类型，可以修改，但是不能使用vec3类型。</td></tr><tr><td>gl_PointSize</td><td>顶点着色器中，表示当前顶点的尺寸，是float类型，可以修改，但是不能使用vec3类型。</td></tr><tr><td>gl_FragColor</td><td>片元着色器中，表示当前片元的颜色，是vec4类型，可以修改，但是不能使用vec3类型。</td></tr><tr><td>gl_FragCoord</td><td>片元着色器中，表示当前片元的位置坐标，是vec4类型，不能修改。</td></tr><tr><td>gl_FrontFacing</td><td>片元着色器中，表示当前片元是否位于正面，是bool类型，不能修改。</td></tr><tr><td>gl_VertexID</td><td>顶点着色器中，表示当前顶点的索引，是int类型，不能修改。</td></tr><tr><td>gl_InstanceID</td><td>顶点着色器中，表示当前顶点所属的实例索引，是int类型，不能修改。</td></tr></tbody></table><p><strong>GLSL ES语句结尾分号不能省略</strong></p><h2 id="渲染管线" tabindex="-1">渲染管线 <a class="header-anchor" href="#渲染管线" aria-label="Permalink to &quot;渲染管线&quot;">​</a></h2><p>可以把渲染管线想象为显卡GPU上的一条流水线，渲染管线上有不同的功能单元。WebGL渲染管线上的各个功能单元，可以通过WebGL API进行控制</p><h3 id="第一个webgl程序" tabindex="-1">第一个WebGL程序 <a class="header-anchor" href="#第一个webgl程序" aria-label="Permalink to &quot;第一个WebGL程序&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> canvas</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webgl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webgl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //顶点着色器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vertexShaderSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      void main() {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        gl_PointSize = 20.0;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        gl_Position = vec4(0.0, 0.0, 0.0, 1.0);</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    \`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //片元着色器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fragmentShaderSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      void main() {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    \`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> program</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl, vertexShaderSource, fragmentShaderSource)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawArrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">POINTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//绘制点</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">gl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vertexShaderSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fragmentShaderSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vertexShader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VERTEX_SHADER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建顶点着色器对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shaderSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vertexShader, vertexShaderSource)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设置着色器代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fragmentShader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FRAGMENT_SHADER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建片元着色器对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shaderSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fragmentShader, fragmentShaderSource)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设置着色器代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compileShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vertexShader)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//编译着色器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compileShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fragmentShader)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//编译着色器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> program</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createProgram</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建程序对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attachShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(program, vertexShader)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//将着色器附加到程序对象上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attachShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(program, fragmentShader)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//将着色器附加到程序对象上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">linkProgram</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(program)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//链接程序对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useProgram</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(program)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//使用程序对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div>`,25),l=[n];function k(e,p,d,r,E,g){return a(),i("div",null,l)}const o=s(h,[["render",k]]);export{y as __pageData,o as default};
