import{_ as a,c as i,o as n,a7 as t}from"./chunks/framework.DLSH1pMh.js";const k=JSON.parse('{"title":"CSS animation 动画属性完全指南","description":"","frontmatter":{"title":"CSS animation 动画属性完全指南","date":"2023-05-22T00:00:00.000Z","categories":["css","工作随记"]},"headers":[],"relativePath":"blogs/word/2023/0522.md","filePath":"blogs/word/2023/0522.md"}'),e={name:"blogs/word/2023/0522.md"},o=t('<h1 id="css-animation-动画属性" tabindex="-1">CSS animation 动画属性 <a class="header-anchor" href="#css-animation-动画属性" aria-label="Permalink to &quot;CSS animation 动画属性&quot;">​</a></h1><p>CSS animation 是一个强大的动画属性集合，它能让我们在网页中创建流畅的动画效果。让我们深入了解它的各个属性和使用方法。</p><h2 id="animation-属性概述" tabindex="-1">animation 属性概述 <a class="header-anchor" href="#animation-属性概述" aria-label="Permalink to &quot;animation 属性概述&quot;">​</a></h2><p>animation 属性是一个简写属性，包含了所有动画相关的子属性。完整语法如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">animation:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> duration</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timing-function</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> delay</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> iteration-count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> direction</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fill-mode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> play-state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="核心属性详解" tabindex="-1">核心属性详解 <a class="header-anchor" href="#核心属性详解" aria-label="Permalink to &quot;核心属性详解&quot;">​</a></h2><h3 id="_1-animation-name-动画名称" tabindex="-1">1. animation-name（动画名称） <a class="header-anchor" href="#_1-animation-name-动画名称" aria-label="Permalink to &quot;1. animation-name（动画名称）&quot;">​</a></h3><p>指定要应用的关键帧动画名称，需要配合 <code>@keyframes</code> 规则使用。</p><h3 id="_2-animation-duration-动画时长" tabindex="-1">2. animation-duration（动画时长） <a class="header-anchor" href="#_2-animation-duration-动画时长" aria-label="Permalink to &quot;2. animation-duration（动画时长）&quot;">​</a></h3><p>设置动画完成一个周期所需的时间，可用秒(s)或毫秒(ms)为单位。</p><h3 id="_3-animation-timing-function-动画速度曲线" tabindex="-1">3. animation-timing-function（动画速度曲线） <a class="header-anchor" href="#_3-animation-timing-function-动画速度曲线" aria-label="Permalink to &quot;3. animation-timing-function（动画速度曲线）&quot;">​</a></h3><p>控制动画在执行过程中的速度变化：</p><ul><li><code>linear</code>: 匀速运动</li><li><code>ease</code>: 缓慢开始，中间加速，结束前减速</li><li><code>ease-in</code>: 缓慢开始，逐渐加速</li><li><code>ease-out</code>: 快速开始，逐渐减速</li><li><code>ease-in-out</code>: 缓慢开始和结束，中间加速</li></ul><h3 id="_4-animation-delay-延迟时间" tabindex="-1">4. animation-delay（延迟时间） <a class="header-anchor" href="#_4-animation-delay-延迟时间" aria-label="Permalink to &quot;4. animation-delay（延迟时间）&quot;">​</a></h3><p>设置动画开始前的等待时间。</p><h3 id="_5-animation-iteration-count-重复次数" tabindex="-1">5. animation-iteration-count（重复次数） <a class="header-anchor" href="#_5-animation-iteration-count-重复次数" aria-label="Permalink to &quot;5. animation-iteration-count（重复次数）&quot;">​</a></h3><p>设置动画播放次数：</p><ul><li>数字：具体播放次数</li><li><code>infinite</code>: 无限循环</li></ul><h3 id="_6-animation-direction-播放方向" tabindex="-1">6. animation-direction（播放方向） <a class="header-anchor" href="#_6-animation-direction-播放方向" aria-label="Permalink to &quot;6. animation-direction（播放方向）&quot;">​</a></h3><p>控制动画的播放方向：</p><ul><li><code>normal</code>: 正向播放</li><li><code>reverse</code>: 反向播放</li><li><code>alternate</code>: 交替播放</li><li><code>alternate-reverse</code>: 反向交替播放</li></ul><h3 id="_7-animation-fill-mode-动画填充模式" tabindex="-1">7. animation-fill-mode（动画填充模式） <a class="header-anchor" href="#_7-animation-fill-mode-动画填充模式" aria-label="Permalink to &quot;7. animation-fill-mode（动画填充模式）&quot;">​</a></h3><p>定义动画开始前和结束后的状态：</p><ul><li><code>none</code>: 不改变默认行为</li><li><code>forwards</code>: 保持动画结束时的状态</li><li><code>backwards</code>: 动画开始前应用第一帧的状态</li><li><code>both</code>: 同时应用 forwards 和 backwards</li></ul><h3 id="_8-animation-play-state-播放状态" tabindex="-1">8. animation-play-state（播放状态） <a class="header-anchor" href="#_8-animation-play-state-播放状态" aria-label="Permalink to &quot;8. animation-play-state（播放状态）&quot;">​</a></h3><p>控制动画的运行状态：</p><ul><li><code>running</code>: 运行中</li><li><code>paused</code>: 暂停</li></ul><h2 id="使用技巧和注意事项" tabindex="-1">使用技巧和注意事项 <a class="header-anchor" href="#使用技巧和注意事项" aria-label="Permalink to &quot;使用技巧和注意事项&quot;">​</a></h2><ol><li><p><strong>性能优化</strong></p><ul><li>优先使用 transform 和 opacity 属性</li><li>避免同时执行过多动画</li><li>适当使用 will-change 属性</li></ul></li><li><p><strong>动画时长选择</strong></p><ul><li>快速动画：200-300ms</li><li>中等动画：300-500ms</li><li>较长动画：500-1000ms</li></ul></li><li><p><strong>用户体验考虑</strong></p><ul><li>提供关闭动画的选项</li><li>避免过于花哨的动画效果</li><li>注意动画的适用场景</li></ul></li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>CSS animation 提供了丰富的动画控制能力，合理使用这些属性可以创建出流畅自然的动画效果。在实际应用中，要注意平衡动画效果与性能消耗，确保为用户提供良好的体验。</p>',31),l=[o];function s(r,d,h,c,m,p){return n(),i("div",null,l)}const _=a(e,[["render",s]]);export{k as __pageData,_ as default};
