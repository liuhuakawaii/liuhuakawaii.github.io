(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{610:function(t,s,a){"use strict";a.r(s);var e=a(2),l=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"树形dp套路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树形dp套路"}},[t._v("#")]),t._v(" 树形DP套路")]),t._v(" "),s("ol",[s("li",[t._v("以某个节点X为头结点的子树中，分析答案有哪些可能性，并且这种分析是以X的左子树，X的右子树和X整棵树的角度来考虑可能性的")]),t._v(" "),s("li",[t._v("根据第一步的可能性分析，列出所有需要的信息")]),t._v(" "),s("li",[t._v("合并第二步的信息，对左树和右树提出同样的要求，并写出信息结构")]),t._v(" "),s("li",[t._v("设计递归函数，递归函数是处理以X为头结点的情况下的答案。包括设计递归的basecase，默认直接得到左树和右树的所有信息，以及把可能性做整合，并且要返回第三步的信息结构这四个小步骤")])])])}),[],!1,null,null,null);s.default=l.exports}}]);