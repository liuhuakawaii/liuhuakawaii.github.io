(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{421:function(v,l,_){v.exports=_.p+"assets/img/121601.7dd02533.png"},614:function(v,l,_){"use strict";_.r(l);var t=_(2),i=Object(t.a)({},(function(){var v=this,l=v._self._c;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h2",{attrs:{id:"红黑树"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[v._v("#")]),v._v(" 红黑树")]),v._v(" "),l("h3",{attrs:{id:"红黑树-avl树-二叉搜索树"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#红黑树-avl树-二叉搜索树"}},[v._v("#")]),v._v(" 红黑树/AVL树/二叉搜索树")]),v._v(" "),l("ol",[l("li",[l("p",[v._v("二叉搜索树的优势就是利用二分实现logn的搜索效率，但是有一些情况，二叉搜索树会因为数据的问题导致失衡，变成左右两子树深度差过大的情况，这样查找效率就大大降低了，退化成了链表形式---On的时间复杂度")])]),v._v(" "),l("li",[l("p",[v._v("平衡树，avl树的出现解决了这种问题，他的规则是保证左右子树深度差不会大于1，如果出现大于1的情况，需要旋转来维持树的平衡")])]),v._v(" "),l("li",[l("p",[v._v("红黑树其实最大的好处就是利用变色来代替了复杂的旋转逻辑，他的规则如下")]),v._v(" "),l("ol",[l("li",[v._v("节点是红色或黑色，根节点是黑色")]),v._v(" "),l("li",[v._v("每个叶子节点都设置为黑色的null节点")]),v._v(" "),l("li",[v._v("每个红色节点的两个子节点都是黑色的，不会出现连续的红色节点")]),v._v(" "),l("li",[v._v("从任一节点到每个叶子节点的所有路径都包含相同数目的黑色节点")])])]),v._v(" "),l("li",[l("p",[v._v("红黑树的约束特性，从根到叶子的最长路径，不会超过最短可能路径的两倍")])])]),v._v(" "),l("h3",{attrs:{id:"红黑树的规则"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#红黑树的规则"}},[v._v("#")]),v._v(" 红黑树的规则")]),v._v(" "),l("ol",[l("li",[l("p",[v._v("变色")]),v._v(" "),l("ul",[l("li",[v._v("首先，插入的节点一般都是红色节点\n"),l("ul",[l("li",[v._v("因为在插入黑色节点的时候，必然会使得路径黑色节点增加，很难调整")]),v._v(" "),l("li",[v._v("插入红色节点可能不需要调整，出现红红相连的情况也可以通过颜色调换和旋转来调整")])])])])]),v._v(" "),l("li",[l("p",[v._v("旋转"),l("br"),v._v(" "),l("img",{attrs:{src:_(421),alt:""}})])]),v._v(" "),l("li",[l("p",[v._v("插入操作规则")])])]),v._v(" "),l("ul",[l("li",[v._v("设要插入的节点为N，其父节点为P")]),v._v(" "),l("li",[v._v("其祖父节点为G，其父亲的兄弟节点为U，（即P和U是同一节点的子节点）\n"),l("ol",[l("li",[v._v("情况1：")])]),v._v(" "),l("ul",[l("li",[v._v("新节点N位于树的根上,没有父节点")]),v._v(" "),l("li",[v._v("这种情况下，我们直接将红色变换成黑色即可,这样满足性质2")])]),v._v(" "),l("ol",{attrs:{start:"2"}},[l("li",[v._v("情况二")])]),v._v(" "),l("ul",[l("li",[v._v("新节点的父节点P是黑色.")]),v._v(" "),l("li",[v._v("性质4没有失效(新节点是红色的)，,性质5也没有任何问题")]),v._v(" "),l("li",[v._v("尽管新节点N有两个黑色的叶子节点nil,但是心节点N是红色的,所以通过它的路径中黑色节点的个数依然相同满足性质5")])])])])])}),[],!1,null,null,null);l.default=i.exports}}]);