(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{645:function(v,_,e){"use strict";e.r(_);var l=e(2),s=Object(l.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"面试-计网-浏览器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面试-计网-浏览器"}},[v._v("#")]),v._v(" 面试 -- 计网&浏览器")]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("在浏览器中输入URL并回车后都发生了什么？")])]),v._v(" "),_("ul",[_("li",[v._v("解析url      "),_("code",[v._v("http://www.baidu.com/api/?x=1&name=小强&from=http://#hash")]),_("div",{staticClass:"language-js line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[v._v("    协议：http默认端口"),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("80")]),v._v("；https默认端口"),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("443")]),v._v("；"),_("span",{pre:!0,attrs:{class:"token constant"}},[v._v("FTP")]),v._v("（大文件）默认端口"),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("21")]),v._v("     \n    防止乱码：对整个url进行编码\n     "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("1.")]),v._v(" encodeURI 、decodeURI  "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//处理空格，中文        ")]),v._v("\n     "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("2.")]),v._v(" encodeURIComponent、decodeURIComponent   "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//主要对传递的参数信息编码")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br")])])]),v._v(" "),_("li",[v._v("客户端想检测是否有强缓存"),_("code",[v._v("Expires Cache-Control")]),_("div",{staticClass:"language-js line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[v._v("    Memory Cache"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" 内存缓存      Disk Cache：硬盘缓存        \n    "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("1.")]),v._v(" 首次打开网页，会检查Disk Cache，有则使用，无则发送网络请求       \n    "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("2.")]),v._v(" 普通刷新（"),_("span",{pre:!0,attrs:{class:"token constant"}},[v._v("F5")]),v._v("），先检查Memory Cache，再检查Disk Cache     \n    "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("3.")]),v._v(" 强制刷新（ctrl"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("+")]),v._v("f5），不走缓存，请求头部均带有Cache"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("control：no"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("cache \n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br")])])]),v._v(" "),_("li",[v._v("协商缓存，有则返回304，客户端再去本地缓存取资源，无则返回200和最新资源")]),v._v(" "),_("li",[v._v("DNS解析，进入域名系统 找到真实ip地址 ，浏览器将域名解析的映射（真实ip）缓存到本地"),_("div",{staticClass:"language-js line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[v._v("    理论上减少"),_("span",{pre:!0,attrs:{class:"token constant"}},[v._v("DNS")]),v._v("请求可以使性能优化（资源放在同一个服务器上）       \n    但项目中不会这么做，服务器拆分的优势        \n    "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("1.")]),v._v(" 资源的合理利用       \n    "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("2.")]),v._v(" 抗压能力增强     \n    "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("3.")]),v._v(" 提高"),_("span",{pre:!0,attrs:{class:"token constant"}},[v._v("HTTP")]),v._v("并发         \n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br")])])]),v._v(" "),_("li",[v._v("建立连接 TCP三次握手（都不会携带正式数据）")]),v._v(" "),_("li",[v._v("请求和传输数据，渲染页面(浏览器渲染页面的整个过程)")]),v._v(" "),_("li",[v._v("断开连接（TCP四次挥手）")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("从哪些点做性能优化？")])]),v._v(" "),_("ul",[_("li",[v._v("webpack层面")]),v._v(" "),_("li",[v._v("HTTP层面\n"),_("ol",[_("li",[v._v("利用缓存\n"),_("ul",[_("li",[v._v("对于静态资源文件实现强缓存和协商缓存（扩展:文件有更新，如何保证及时刷新?）")]),v._v(" "),_("li",[v._v("对于不经常更新的接口数据采用本地存储做数据缓存（扩展: cookie / localStorage / vuex|redux区别?）")])])]),v._v(" "),_("li",[v._v("DNS优化\n"),_("ul",[_("li",[v._v("分服务器部署,增加HTTP并发性(导致DNS解析变慢)")]),v._v(" "),_("li",[v._v("DNS Prefetch（预获取）")])])]),v._v(" "),_("li",[v._v("TCP的三次握手和四次挥手\n"),_("ul",[_("li",[_("code",[v._v("Connection")]),v._v(" : "),_("code",[v._v("keep-alive")])])])]),v._v(" "),_("li",[v._v("数据传输\n"),_("ul",[_("li",[v._v("减少数据传输的大小")]),v._v(" "),_("li",[v._v("内容或者数据压缩(webpack等)")]),v._v(" "),_("li",[v._v("服务器端一定要开启GZIP压缩（─般能压缩60%左右）")]),v._v(" "),_("li",[v._v("大批量数据分批次请求（例如:下拉刷新或者分页，保证首次加载请求数据少）")]),v._v(" "),_("li",[v._v("减少HTTP请求的次数（资源文件合并处理、字体图标、雪碧图、图片的BASE64）")]),v._v(" "),_("li",[v._v("懒加载，SSR服务端渲染")])])]),v._v(" "),_("li",[v._v("CDN服务器“地域分布式”")]),v._v(" "),_("li",[v._v("采用HTTP2.0")])])]),v._v(" "),_("li",[v._v("延迟、异步加载（异步组件）")]),v._v(" "),_("li",[v._v("骨架屏")]),v._v(" "),_("li",[v._v("大数据渲染优化")]),v._v(" "),_("li",[v._v("大文件传输处理")]),v._v(" "),_("li",[v._v("性能与动画\n"),_("ol",[_("li",[v._v("减少dom操作,避免回流")]),v._v(" "),_("li",[v._v("采用文档碎片(虚拟dom的原理)")]),v._v(" "),_("li",[v._v("要操作的元素脱离文档流（定位，浮动，translate）")])])])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("图片懒加载")])]),v._v(" "),_("ul",[_("li",[v._v("性能优化，图片在需要的时候才加载，减轻服务的负担，提高页面的加载速度")]),v._v(" "),_("li",[v._v("图片的加载是在src的值引起的，对src赋值的时候会请求图片资源，基于这个，我们可以利用html5的自定义属性data-xxx来先保存src的路径，当我们需要加载图片的时候再把data-xxx的值赋予src，就能实现图片的懒加载")]),v._v(" "),_("li",[v._v("第三方插件:lazyload")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("瀑布流布局(自适应)")])]),v._v(" "),_("ol",[_("li",[v._v("等宽不等高：内容从左到右排列，一行排满之后，其余内容按顺序排在短的一列后\n"),_("ul",[_("li",[v._v("计算出一列能够容纳几列元素（可视宽度/单个元素宽度，取整）")]),v._v(" "),_("li",[v._v("将后续的元素放在列中高度之和最小的列后面，利用定位")])])])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("Cookie 和 Token 的区别")])]),v._v(" "),_("ol",[_("li",[v._v("为什么要有 Cookie 呢?\n"),_("ul",[_("li",[v._v("一般接口但是通过 HTTP 协议来进行数据交换的，而 HTTP 协议的特点是，无状态，工作前通过三次握手建立连接，工作完成后立刻通过四次挥手断开连接，每次连接都是独立存在的，没有任何状态将请求串联成一个整体，因此每次都需要重新验证是身份，即耗费了性能，也给黑客的攻击留下隐患。")]),v._v(" "),_("li",[v._v("Cookie 的作用是什么呢，它的出现，就是来弥补 HTTP 无状态的问题的，Cookie 可以作为一个状态保存的状态机,用来保存用户的相关登录状态，当第一次验证通过后，服务器可以通过 set-cookie 令客户端将自己的 cookie  保存起来，当下一次再发送请求的时候，直接带上 cookie 即可，而服务器检测到客户端发送的 cookie 与其保存的 cookie 值保持一致时，则直接信任该连接，不再进行验证操作")])])]),v._v(" "),_("li",[v._v("有了 Cookie 为什么还需要 Token？\n"),_("ul",[_("li",[v._v("Cookie 作为 HTTP 规范，存在一些历史遗留问题，比如"),_("strong",[v._v("跨域限制")]),v._v(","),_("strong",[v._v("存在默认存储以及默认发送的行为")]),v._v("，存在一定的安全性问题")]),v._v(" "),_("li",[v._v("相较于 Cookie，token 需要自己存储，自己进行发送，"),_("strong",[v._v("不存在跨域限制")]),v._v("，因此 Token 更加的灵活，没有 Cookie 那么多的“历史包袱”束缚，在安全性上也能够做更多的优化。")])])]),v._v(" "),_("li",[v._v("Token 有什么 优势？\n"),_("ul",[_("li",[v._v("Cookie 存储空间 4kb，因此存储的主要是一个用户 id，其他的用户信息都存储在服务器的Session中，对于服务器来说，将是非常大的性能压力")]),v._v(" "),_("li",[v._v("Token 没有内存限制，用户信息可以存储 Token 中，返回给用户客户端自行存储，避开了性能问题")])])])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("网络安全问题")])]),v._v(" "),_("ol",[_("li",[v._v("XSS(跨站脚本攻击)\n"),_("ul",[_("li",[v._v("反射型 XSS:非持久型XSS，构造恶意链接诱导点击，服务器返回带XSS的网页，用户触发XSS，向恶意服务器发送敏感信息")]),v._v(" "),_("li",[v._v("存储型 XSS：持久化，代码是存储在服务器中的，如在个人信息或发表文章等地方，插入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，用户访问该页面的时候触发代码执行")]),v._v(" "),_("li",[v._v("防范措施 ： "),_("strong",[_("font",{attrs:{color:"red"}},[v._v("永远不要相信用户输入的任何东西")])],1)])])]),v._v(" "),_("li",[v._v("CSRF攻击（跨站请求伪造）\n"),_("ul",[_("li",[v._v("伪造恶意网站，诱导用户点击，窃取其真实网站的cookie信息，从而盗号，假冒用户身份操作")]),v._v(" "),_("li",[v._v("防范措施：\n"),_("ul",[_("li",[v._v("验证 HTTP Referer 字段")]),v._v(" "),_("li",[v._v("添加验证码")]),v._v(" "),_("li",[v._v("添加 token")])])])])]),v._v(" "),_("li",[v._v("SQL 注入\n"),_("ul",[_("li",[v._v("例如上送用户名和密码的时候，黑客猜测登录验证的 SQL 语句大致为"),_("code",[v._v("select * from user where user=user and psd=psd;")]),v._v(" ，他可以通过构造用户名 "),_("code",[v._v("user = yimwu';--")]),v._v(",使得后台解析语句为"),_("code",[v._v("select * from user where user='yimwu';--' and psd=psd;")]),v._v("，这个语句中 "),_("code",[v._v("--")]),v._v(" 表示注释，就绕过了密码校验")]),v._v(" "),_("li",[v._v("防范措施 ： 对输入进行细致的过滤，对于"),_("strong",[v._v("相关的关键词")]),v._v("进行"),_("strong",[v._v("屏蔽")]),v._v("和"),_("strong",[v._v("转义")])])])]),v._v(" "),_("li",[v._v("DDOS（分布式拒绝服务攻击）\n"),_("ul",[_("li",[v._v("操作大量僵尸机同时对某网站进行访问，使得网站服务器资源耗尽，宕机")]),v._v(" "),_("li",[v._v("防范措施  ：针对 DDOS，由于其访问并非同一台主机发起，无法对访问次数进行限制并封禁 IP ，因此在软件层面上是很难进行正对性防御的\n"),_("ul",[_("li",[v._v("搭建负载均衡高性能服务器集群")]),v._v(" "),_("li",[v._v("部署 CDN")]),v._v(" "),_("li",[v._v("部署安全厂商的防火墙")]),v._v(" "),_("li",[v._v("购买云 DDOS 高防服务")])])])])]),v._v(" "),_("li",[v._v("垂直越权\n"),_("ul",[_("li",[v._v("例如通过普通账号登录，服务器验密后返回对应权限，黑客通过工具拦截服务器登录成功的响应包，进行角色权限修改，欺骗前端，实现越权")]),v._v(" "),_("li",[v._v("防范措施：对于角色控制相关的参数应该做加密处理，或者增加多个隐藏字段来进行权限相关的验证")])])]),v._v(" "),_("li",[v._v("水平越权\n"),_("ul",[_("li",[v._v("例如通过普通账号登录，服务器验密后返回对应权限，黑客通过工具对服务器返回的ID码进行拦截分析，前端发起请求，修改Id码，实现水平越权")]),v._v(" "),_("li",[v._v("防范措施：对每个接口添加 token 验证，id 必须做到无法猜解")])])]),v._v(" "),_("li",[v._v("文件上传漏洞\n"),_("ul",[_("li",[v._v("通过BP对文件上传过程中的数据包截取，把合法后缀修改回来，成功绕过前端检测")]),v._v(" "),_("li",[v._v("通过BP对后端检测过程中的content-type字段，把合法后缀修改回来，成功绕过后端检测")]),v._v(" "),_("li",[v._v("糅合合法文件头和恶意代码，绕过服务器验证")])])]),v._v(" "),_("li",[v._v("WebShell\n"),_("ul",[_("li",[v._v("配合文件上传漏洞来上传恶意脚本，诱导服务器执行恶意脚本，连接服务器执行，执行恶意指令")])])])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("HTTP和HTTPS")])]),v._v(" "),_("ul",[_("li",[v._v("HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的")]),v._v(" "),_("li",[v._v("HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("wepack中loader和plugin的区别")])]),v._v(" "),_("ol",[_("li",[v._v("由于"),_("code",[v._v("webpack")]),v._v(" 本身只能打包"),_("code",[v._v("commonjs")]),v._v("规范的js文件，所以，针对css，图片等格式的文件没法打包，就需要引入第三方的模块进行打包。"),_("code",[v._v("loader")]),v._v("虽然是扩展了 "),_("code",[v._v("webpack")]),v._v(" ，但是它只专注于转化文件（"),_("code",[v._v("transform")]),v._v("）这一个领域，完成压缩，打包，语言翻译。"),_("strong",[v._v("仅仅只是为了打包!!!")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("css-loader")]),v._v("和"),_("code",[v._v("style-loader")]),v._v("模块是为了打包css的")]),v._v(" "),_("li",[_("code",[v._v("babel-loader")]),v._v("和"),_("code",[v._v("babel-core")]),v._v("模块时为了把ES6的代码转成ES5")]),v._v(" "),_("li",[_("code",[v._v("url-loader")]),v._v("和"),_("code",[v._v("file-loader")]),v._v("是把图片进行打包的")])])]),v._v(" "),_("li",[_("code",[v._v("plugin")]),v._v("也是为了扩展"),_("code",[v._v("webpack")]),v._v("的功能，但是 "),_("code",[v._v("plugin")]),v._v(" 是作用于"),_("code",[v._v("webpack")]),v._v("本身上的。而且"),_("code",[v._v("plugin")]),v._v("不仅只局限在打包，资源的加载上。"),_("strong",[v._v("它的功能要更加丰富。从打包优化和压缩，到重新定义环境变量，功能强大到可以用来处理各种各样的任务。")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("ignore-plugin")]),v._v(":用来忽略一些文件")]),v._v(" "),_("li",[_("code",[v._v("html-webpack-plugin")]),v._v("：在build中新建一个index.html文件，自动引入打包输出的所有资源（js/css）.可以配置 template为新html文件创建模板")]),v._v(" "),_("li",[_("code",[v._v("mini-css-extract-plugin")]),v._v("：将css单独打包成一个文件的css")]),v._v(" "),_("li",[_("code",[v._v("serviceworker-webpack-plugin")]),v._v("：离线缓存功能")]),v._v(" "),_("li",[_("code",[v._v("clean-webpack-plugin")]),v._v("：用于清除目录文件,在生产环境中编译文件的时候,用它来讲dist的目录清除干净,然后再生成新的")]),v._v(" "),_("li",[_("code",[v._v("webpack-parallel-uglify-plugin")]),v._v("：多线程压缩js代码,加快构建速度")])])]),v._v(" "),_("li",[_("code",[v._v("loader")]),v._v("运行在打包文件之前（"),_("code",[v._v("loader")]),v._v("为在模块加载时的预处理文件），"),_("code",[v._v("plugins")]),v._v("在整个编译周期都起作用。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("GET和POST的区别")])]),v._v(" "),_("ol",[_("li",[v._v("get用来获取数据，post用来提交数据")]),v._v(" "),_("li",[v._v('get请求的数据会附加在url之 ，以 " ？ "分割url和传输数据，多个参数用 "&"连接，而post请求会把请求的数据放在http请求体中')]),v._v(" "),_("li",[v._v("get是请求获取指定资源，get方法时"),_("strong",[v._v("安全")]),v._v("（从服务器的维度来看）、"),_("strong",[v._v("幂等")]),v._v("、"),_("strong",[v._v("可缓存的")]),v._v("，get方法的报文主体没有任何语义。post是根据报文主体来对指定资源做出处理，post不安全，不幂等，不可缓存（大部分情况下）。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("HTTP1.0 1.1 2.0")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("HTTP1.0")]),v._v(" 一次请求-响应，建立一个连接，用完关闭；每一个请求都要建立一个连接")]),v._v(" "),_("li",[_("strong",[v._v("HTTP1.X长连接复用")]),v._v("：若干个请求"),_("strong",[v._v("排队串行")]),v._v("化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞 "),_("strong",[v._v("线头阻塞")])]),v._v(" "),_("li",[_("strong",[v._v("HTTP2.0多路复用")]),v._v("：多个请求可同时在一个连接上并行执行。某个请求任务耗时严重，不会影响到其它连接的正常执行")])])])])])}),[],!1,null,null,null);_.default=s.exports}}]);