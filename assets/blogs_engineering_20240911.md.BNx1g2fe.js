import{_ as s,c as i,o as a,a3 as e}from"./chunks/framework.DpzXWsSh.js";const n="/assets/06.B6fbuNlj.jpg",o="/assets/07.BWDMH_FK.png",q=JSON.parse('{"title":"前端工程化 -- npm详解","description":"","frontmatter":{"title":"前端工程化 -- npm详解","date":"2024-9-11","categories":["工程化"]},"headers":[],"relativePath":"blogs/engineering/20240911.md","filePath":"blogs/engineering/20240911.md"}'),l={name:"blogs/engineering/20240911.md"},t=e('<h2 id="package-json" tabindex="-1">package.json <a class="header-anchor" href="#package-json" aria-label="Permalink to &quot;package.json&quot;">​</a></h2><p><img src="'+n+`" alt=""></p><h3 id="必备属性" tabindex="-1">必备属性 <a class="header-anchor" href="#必备属性" aria-label="Permalink to &quot;必备属性&quot;">​</a></h3><p><code>package.json</code> 中有非常多的属性，其中必须填写的只有两个：<code>name</code> 和 <code>version</code> ，这两个属性组成一个 npm 模块的唯一标识。</p><p><strong>name</strong>:<code>name</code>即模块名称，需要遵循官方的一些规范和建议</p><ul><li>可以使用<a href="https://www.npmjs.com/package/validate-npm-package-name" target="_blank" rel="noreferrer">validate-npm-package-name</a>来检测包名是否合法</li><li>可以使用<code>npm view packageName</code>命令来查看一个包是否已经存在，并可以获取包相关信息</li></ul><h3 id="描述信息" tabindex="-1">描述信息 <a class="header-anchor" href="#描述信息" aria-label="Permalink to &quot;描述信息&quot;">​</a></h3><ul><li><p><strong>基本描述</strong>:</p><ul><li><code>description</code>:用于添加模块的的描述信息，方便别人了解你的模块。</li><li><code>keywords</code>:用于给你的模块添加关键字。 当然，他们的还有一个非常重要的作用，就是利于模块检索。当你使用 <code>npm search</code> 检索模块时，会到<code>description</code> 和 <code>keywords</code> 中进行匹配。写好 <code>description</code> 和 <code>keywords</code> 有利于你的模块获得更多更精准的曝光</li></ul></li><li><p><strong>开发人员</strong></p><ul><li><code>author</code> :指包的主要作者，一个 <code>author</code> 对应一个人。</li><li><code>contributors</code>: 指贡献者信息，一个 <code>contributors</code> 对应多个贡献者，值为数组，</li></ul></li><li><p><strong>地址</strong></p><ul><li><code>homepage</code>: 用于指定该模块的主页；</li><li><code>repository</code>: 用于指定模块的代码仓库；</li><li><code>bugs</code>: 指定一个地址或者一个邮箱，对你的模块存在疑问的人可以到这里提出问题。</li></ul></li><li><p><strong>目录&amp;文件相关</strong></p><ul><li><code>main</code>: 指定程序的主入口文件，例如， <code>antd</code> 指定的模块入口 <code>lib/index.js</code> ，当我们在代码用引入 <code>antd</code> 时：<code>import { notification } from &#39;antd&#39;</code>; 实际上引入的就是 <code>lib/index.js</code> 中暴露出去的模块。</li><li><code>bin</code>: 指定模块的命令行入口，如：<code>bin</code>: <code>{ &quot;my-module&quot;: &quot;./lib/cli.js&quot; }</code></li><li><code>files</code>: 用于描述你 <code>npm publish</code> 后推送到 <code>npm</code> 服务器的文件列表，如果指定文件夹，则文件夹内的所有内容都会包含进来。，默认为 <code>[&quot;lib&quot;]</code>，即打包 <code>lib</code> 目录下的文件， 另外，你还可以通过配置一个 <code>.npmignore</code> 文件来排除一些文件, 防止大量的垃圾文件推送到 <code>npm</code>, 规则上和你用的 <code>.gitignore</code> 是一样的。<code>.gitignore</code> 文件也可以充当<code>.npmignore</code> 文件。</li><li><code>man</code>: <code>man</code> 命令是 Linux 下的帮助指令，通过 <code>man</code> 指令可以查看 Linux 中的指令帮助、配置文件帮助和编程帮助等信息。，如：<code>man</code>: <code>[&quot;doc/man1/foo.1&quot;]</code></li><li><code>directories</code>: 用于描述模块的目录，例如一个规范项目目录：</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;directories&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/lib/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//存放js代码的目录；</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;bin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/bin/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//存放可执行二进制文件的目录；</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;man&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/man/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//存放 man 文档的目录；</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;doc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/doc/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//存放文档的目录；</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/test/&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //存放单元测试用例代码的目录；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>依赖配置</strong></p><ul><li><code>dependencies</code>: 用于描述模块的依赖，如：<code>dependencies</code>: <code>{ &quot;react&quot;: &quot;^0.14.0&quot;, &quot;react-dom&quot;: &quot;^0.14.0&quot; }</code></li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0 - 2.9999.9999&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=1.0.2 &lt;2.1.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;baz&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;1.0.2 &lt;=2.3.4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;boo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;qux&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;asd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://asdf.com/asdf.tar.gz&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从远程下载</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;til&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;~1.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1.2.x</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;elf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;~1.2.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;thr&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.3.x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;lat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;latest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dyl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file:../dyl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 本地文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;kpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm:pkg@1.0.0&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 包的自定义别名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>devDependencies</code>: 用于描述开发阶段的依赖，如：<code>devDependencies</code>: <code>{ &quot;babel-core&quot;: &quot;^6.0.0&quot;, &quot;babel-preset-es2015&quot;: &quot;^6.0.0&quot; }</code></li><li><code>peerDependencies</code>: 用于描述运行时依赖，如：<code>peerDependencies</code>: <code>{ &quot;react&quot;: &quot;^0.14.0&quot; }</code></li></ul></li><li><p><strong>脚本配置</strong></p><ul><li><code>scripts</code>: 用于配置一些脚本命令的缩写</li><li><code>pre</code> 和 <code>post</code> 前缀，用于描述在命令执行前和命令执行后要执行的脚本，如：<code>scripts</code>: <code>{ &quot;prepublish&quot;: &quot;npm run build&quot;, &quot;postpublish&quot;: &quot;npm run deploy&quot; }</code></li><li><code>config</code>: 字段用于配置脚本中使用的环境变量，例如下面的配置，可以在脚本中使用<code>process.env.npm_package_config_port</code>进行获取。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8080&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>发布配置</strong></p><ul><li><code>engines</code>: 指定模块的运行环境，如：<code>engines</code>: <code>{ &quot;node&quot;: &quot;&gt;=0.10.3 &lt;0.12&quot; }</code></li><li><code>private</code>: 指定模块是否为私有模块，私有模块不会被 <code>npm</code> 发布到 <code>npm</code> 服务器，如：<code>private</code>: <code>true</code></li></ul></li></ul><h2 id="包管理工具" tabindex="-1">包管理工具 <a class="header-anchor" href="#包管理工具" aria-label="Permalink to &quot;包管理工具&quot;">​</a></h2><h3 id="npm-install" tabindex="-1">npm install <a class="header-anchor" href="#npm-install" aria-label="Permalink to &quot;npm install&quot;">​</a></h3><p><img src="`+o+'" alt=""></p><h4 id="嵌套结构" tabindex="-1">嵌套结构 <a class="header-anchor" href="#嵌套结构" aria-label="Permalink to &quot;嵌套结构&quot;">​</a></h4><p>npm 的早期版本， npm 处理依赖的方式简单粗暴，以递归的形式，严格按照 <code>package.json</code> 结构以及子依赖包的 <code>package.json</code> 结构将依赖安装到他们各自的 <code>node_modules</code> 中。直到有子依赖包不在依赖其他模块。</p><p><strong>优点:</strong></p><ul><li><code>node_modules</code> 的结构和 <code>package.json</code> 结构一一对应，层级结构明显，并且保证了每次安装目录结构都是相同的。 <strong>缺点:</strong></li><li>如果你依赖的模块非常之多，你的 <code>node_modules</code> 将非常庞大，嵌套层级非常之深</li><li>在不同层级的依赖中，可能引用了同一个模块，导致大量冗余；</li><li>在 Windows 系统中，文件路径最大长度为260个字符，嵌套层级过深可能导致不可预知的问题；</li></ul><h4 id="扁平结构" tabindex="-1">扁平结构 <a class="header-anchor" href="#扁平结构" aria-label="Permalink to &quot;扁平结构&quot;">​</a></h4><p>为了解决以上问题，NPM 在 3.x 版本做了一次较大更新。其将早期的嵌套结构改为扁平结构：</p><ul><li>安装模块时，不管其是直接依赖还是子依赖的依赖，优先将其安装在 node_modules 根目录。</li><li>当安装到相同模块时，判断已安装的模块版本是否符合新模块的版本范围，如果符合则跳过，不符合则在当前模块的 <code>node_modules</code> 下安装该模块。</li></ul><p><strong>缺点：</strong></p><ul><li>并未完全解决模块冗余的问题</li><li>带来了新的问题，假如你的A依赖了C1，B依赖了C2，如果你的<code>package.json</code>的顺序是A,B，那么会先安装A,B,C1，再把C2安装到B的node_modules下，但是如果顺序是B,A，那么会先安装B,C2，再把C1安装到A的node_modules下，这样依赖结构的不确定性可能会给程序带来不可预知的问题。</li></ul><h4 id="lock文件" tabindex="-1">Lock文件 <a class="header-anchor" href="#lock文件" aria-label="Permalink to &quot;Lock文件&quot;">​</a></h4><p>为了解决 <code>npm install</code> 的不确定性问题，在 <code>npm 5.x</code> 版本新增了 <code>package-lock.json</code> 文件，而安装方式还沿用了 <code>npm 3.x</code> 的扁平化的方式。 <code>package-lock.json</code> 的作用是锁定依赖结构，即只要你目录下有 <code>package-lock.json</code> 文件，那么你每次执行 <code>npm install</code> 后生成的 <code>node_modules</code> 目录结构一定是完全相同的。 同时，<code>package-lock.json</code> 中已经缓存了每个包的具体版本和下载链接，不需要再去远程仓库进行查询，然后直接进入文件完整性校验环节，减少了大量网络请求。</p><h3 id="npm-node-package-manager" tabindex="-1">npm(Node Package Manager) <a class="header-anchor" href="#npm-node-package-manager" aria-label="Permalink to &quot;npm(Node Package Manager)&quot;">​</a></h3><p>npm 是最早且最广泛使用的 Node.js 包管理器。</p><p><strong>优点</strong></p><ol><li>生态系统最大，几乎所有的 JavaScript 包都可以在 npm 上找到。</li><li>默认随 Node.js 安装，无需额外设置。</li><li>npm scripts 功能强大，可以方便地定义和运行项目脚本。</li></ol><p><strong>缺点</strong></p><ol><li>早期版本安装速度较慢，特别是在处理大型项目时。</li><li>node_modules 结构可能很深，导致文件路径过长（尤其在 Windows 上）。</li><li>包安装的确定性较低（npm5 之前）。</li><li>使用 package-lock.json 文件来锁定依赖版本，提高安装的确定性，但还是没有解决依赖冗余的问题</li><li>幽灵依赖：多个版本的子依赖，第一个会被安装到 node_modules，package.json没有声明却会被访问到</li></ol><h3 id="yarn" tabindex="-1">yarn <a class="header-anchor" href="#yarn" aria-label="Permalink to &quot;yarn&quot;">​</a></h3><p>Yarn 由 Facebook 开发，旨在解决 npm 的一些问题。</p><p><strong>优点</strong></p><ol><li>安装速度快，利用<strong>并行下载</strong>和<strong>缓存机制</strong>。</li><li>提供了更好的依赖确定性，通过 yarn.lock 文件精确锁定版本。</li><li>离线模式支持，可以从缓存安装包。</li><li>更友好的 CLI 输出。</li></ol><p><strong>缺点：</strong></p><ol><li>需要单独安装，不随 Node.js 默认提供。</li><li>某些情况下可能与 npm 产生兼容性问题。</li></ol><h3 id="pnpm" tabindex="-1">pnpm <a class="header-anchor" href="#pnpm" aria-label="Permalink to &quot;pnpm&quot;">​</a></h3><p>pnpm 是较新的包管理器，专注于提高效率和节省磁盘空间。</p><p><strong>优点：</strong></p><ol><li>非常快速，pnpm通过<code>hard link</code>（硬连接）机制，节省磁盘空间并提升安装速度。</li><li>建立非扁平的<code>node_modules</code>目录，依赖包都是<code>sybolic link（</code>软链接）,目录里的<code>package</code>都软链到<code>.pnpm</code>下这样的路径。</li><li><code>node_modules</code>目录是非扁平的，不存在由于<strong>依赖提升</strong>带来的幽灵依赖问题。</li><li>支持 monorepo 结构。</li></ol><p><strong>缺点：</strong> 相对较新，生态系统和社区支持可能不如 npm 和 Yarn 广泛。 某些旧项目或特定工具可能与其 node_modules 结构不兼容。</p>',39),p=[t];function d(h,c,k,r,g,u){return a(),i("div",null,p)}const m=s(l,[["render",d]]);export{q as __pageData,m as default};
