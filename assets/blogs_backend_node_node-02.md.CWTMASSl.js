import{_ as t,c as i,o as l,a5 as a}from"./chunks/framework.Bx-mEslM.js";const s="/assets/02-01.BKjpxoTH.jpg",o="/assets/02-02.CjZo1Y61.jpg",r="/assets/02-03.C_vGYHWQ.png",e="/assets/02-04.D2pCPwz5.png",n="/assets/02-05.Cu4BEUVu.png",p="/assets/02-06.CNhgGsHa.png",h="/assets/02-07.CKTKrKHw.png",_=JSON.parse('{"title":"Node.js深入浅出 -- Node 网络详解","description":"","frontmatter":{"title":"Node.js深入浅出 -- Node 网络详解","date":"2023-8-22","categories":["node","backend"]},"headers":[],"relativePath":"blogs/backend/node/node-02.md","filePath":"blogs/backend/node/node-02.md"}'),d={name:"blogs/backend/node/node-02.md"},c=a('<h2 id="osi-tcp-ip模型设计" tabindex="-1">OSI &amp; TCP/IP模型设计 <a class="header-anchor" href="#osi-tcp-ip模型设计" aria-label="Permalink to &quot;OSI &amp; TCP/IP模型设计&quot;">​</a></h2><h3 id="osi七层模型" tabindex="-1">OSI七层模型 <a class="header-anchor" href="#osi七层模型" aria-label="Permalink to &quot;OSI七层模型&quot;">​</a></h3><p>OSI七层模型（Open System Interconnection）开放式的系统互联</p><ol><li><strong>物理层（Physical Layer）</strong></li></ol><p>职责：负责比特流的传输，也就是数据在物理介质上的传输，如光纤、电缆等。<br> 比喻：想象你在玩“传话游戏”，最底层就是传递信息的基础——纸条。这里的纸条就像是电线或光纤，负责将信息从一个地方传到另一个地方。<br> 关键词：电缆、光纤、无线电波</p><ol start="2"><li><strong>数据链路层（Data Link Layer）</strong></li></ol><p>职责：负责在物理层的基础上建立可靠的数据传输机制，包括帧的同步、差错控制和流量控制。<br> 比喻：继续我们的“传话游戏”，这一层相当于你把纸条放在一个信封里，确保信息能够准确无误地到达目的地。如果有人不小心弄丢了信封，你会再发一封。<br> 关键词：MAC地址、帧、差错检测与纠正</p><ol start="3"><li><strong>网络层（Network Layer）</strong></li></ol><p>职责：负责将数据包从源端传输到目的端，包括路由选择和逻辑寻址。<br> 比喻：这一层就像是邮政服务，你要寄一封信给远方的朋友。邮政局会根据信封上的地址选择最合适的路线，确保信件能够送到朋友手中。<br> 关键词：IP地址、路由、逻辑地址</p><ol start="4"><li><strong>传输层（Transport Layer）</strong></li></ol><p>职责：负责端到端的数据传输，保证数据的完整性，并进行流量控制和拥塞控制。<br> 比喻：想象你正在打包一份礼物，不仅要在外面贴上标签，还要确保礼物完好无损地送到收件人手上。这一层就像快递员，确保包裹安全送达。<br> 关键词：TCP、UDP、端口号、流量控制</p><ol start="5"><li><strong>会话层（Session Layer）</strong></li></ol><p>职责：负责建立、管理和终止会话，包括会话管理、同步和恢复等功能。<br> 比喻：这一层就像是电话总机，负责接听来电，帮你建立通话，并在通话结束后挂断电话。它管理着整个对话过程。<br> 关键词：会话管理、同步点、恢复机制</p><ol start="6"><li><strong>表示层（Presentation Layer）</strong></li></ol><p>职责：负责数据的表示和转换，包括数据格式化、加密和解密等。<br> 比喻：这一层就像是翻译官，负责将你说的语言翻译成对方能够理解的语言。此外，它还负责确保信息的安全性，就像给你的信件加密一样。<br> 关键词：数据格式化、加密、解密</p><ol start="7"><li><strong>应用层（Application Layer）</strong></li></ol><p>职责：提供网络服务给最终用户，包括文件传输、邮件服务、目录服务等。<br> 比喻：这一层就像是邮局的服务窗口，你在这里可以寄信、收信、查询邮件状态等。它是用户与网络服务之间的接口。<br> 关键词：HTTP、FTP、SMTP</p><p><strong>总结</strong></p><p>OSI七层模型就像是一座高塔，每一层都有其独特的职责，从最底层的物理传输，一直到最顶层的应用服务。每一层的工作都为上一层提供了坚实的基础，从而保证了整个网络通信系统的高效运作。</p><h3 id="tcp-ip协议" tabindex="-1">TCP/IP协议 <a class="header-anchor" href="#tcp-ip协议" aria-label="Permalink to &quot;TCP/IP协议&quot;">​</a></h3><p>OSI 模型就像是一个详细的建筑蓝图，定义了每一层的功能和职责，但没有具体的建筑材料和施工方法。而 TCP/IP 协议就像是一个实际的建筑项目，使用了具体的建筑材料（协议）和施工方法（实现），完成了实际的建筑（网络通信）。</p><p><img src="'+s+'" alt="OSI模型对比tcp/ip协议栈"></p><p>OSI是一种理论下的模型，而TCP/IP已被广泛使用，成为网络互联事实上的标准。</p><p><strong>层次结构</strong></p><ol><li><p><strong>应用层</strong>：提供网络服务，如 HTTP、FTP、SMTP 等。</p></li><li><p><strong>传输层</strong>：负责端到端的通信，如 TCP 和 UDP。</p></li><li><p><strong>网络层</strong>：负责数据的路由和转发，如 IP。</p></li><li><p>**网络接口层：**负责物理连接和数据传输，如以太网、ARP 等。</p></li></ol><h2 id="tcp-udp" tabindex="-1">TCP&amp;UDP <a class="header-anchor" href="#tcp-udp" aria-label="Permalink to &quot;TCP&amp;UDP&quot;">​</a></h2><h3 id="tcp、udp区别" tabindex="-1">TCP、UDP区别 <a class="header-anchor" href="#tcp、udp区别" aria-label="Permalink to &quot;TCP、UDP区别&quot;">​</a></h3><ul><li><p><code>TCP（Transmission Control Protocol）</code>，是一种面向连接的、可靠的传输层协议，把上面应用层交下来的数据看成无结构的字节流来发送，需要20个字节 <img src="'+o+'" alt=""></p></li><li><p><code>UDP（User Datagram Protocol）</code>，用户数据包协议，是一个简单的面向数据报的通信协议，只是在其上面加上首部后就交给了下面的网络层，只占用8个字节（64bit） <img src="'+r+'" alt=""></p></li></ul><table><thead><tr><th></th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>是否连接</td><td>面向连接的，需要建立连接，然后再发送数据</td><td>面向无连接的，不需要建立连接，直接发送数据包</td></tr><tr><td>是否可靠</td><td>可靠传输，使用流量控制和拥塞控制</td><td>不可靠传输，不使用流量控制和拥塞控制</td></tr><tr><td>连接对象个数</td><td>一对一通信</td><td>支持一对一，一对多，多对一和多对多交互通信</td></tr><tr><td>传输方式</td><td>面向字节流</td><td>面向报文</td></tr><tr><td>首部开销</td><td>首部最小 20 字节，最大 60 字节</td><td>首部开销小，仅 8 字节</td></tr><tr><td>适用场景</td><td>适用于要求可靠传输的应用，例如文件传输</td><td>适用于实时应用（IP 电话、视频会议、直播等）</td></tr></tbody></table><h3 id="tcp的三次握手、四次挥手" tabindex="-1">TCP的三次握手、四次挥手 <a class="header-anchor" href="#tcp的三次握手、四次挥手" aria-label="Permalink to &quot;TCP的三次握手、四次挥手&quot;">​</a></h3><ul><li>三次握手 <img src="'+e+'" alt=""></li></ul><p>若客户端和服务端一起发送消息？ <img src="'+n+'" alt=""></p><ul><li>四次挥手 <img src="'+p+`" alt=""></li></ul><p><strong>TCP是否每次连接都需要3次握手？</strong></p><ul><li>TCP快速打开（TCP Fast Open，TFO）</li><li>第一次握手： <ol><li>SYN在fast open带上cookie</li><li>服务端产生cookie，在ACK返回改cookie给客户端</li><li>客户端存储cookie 以后：</li><li>客户端带有cookie</li><li>服务端验证该cookie，有效，在返回ACK的同时，将数据直接返回给应用层，无效，3次握手</li><li>少一次ACK的RTT（round-trip time，往返时延）</li></ol></li></ul><p><strong>为什么最后要等2个MSL（Maximum Segment Lifetime，最长报文寿命）</strong></p><ul><li>确保接收方收到ACK；</li><li>确保没有新的报文到发送方</li></ul><h2 id="http-超文本传输协议" tabindex="-1">HTTP（超文本传输协议） <a class="header-anchor" href="#http-超文本传输协议" aria-label="Permalink to &quot;HTTP（超文本传输协议）&quot;">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><p>HTTP（HyperText Transfer Protocol）是一种<strong>应用层协议</strong>，用于在 Web 浏览器和 Web 服务器之间传输超文本（如 HTML 页面）。HTTP 基于 TCP 协议，确保数据的可靠传输。</p><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ol><li><p><strong>无状态</strong>：HTTP 协议本身是无状态的，服务器不会保存客户端的状态信息, 我们可以通过Cookie来保存状态。</p></li><li><p><strong>client-server模型</strong>：客户端发送请求，服务器返回响应。</p></li><li><p><strong>基于 TCP</strong>：HTTP 使用 TCP 协议来确保数据的可靠传输。</p></li></ol><h3 id="状态码" tabindex="-1">状态码 <a class="header-anchor" href="#状态码" aria-label="Permalink to &quot;状态码&quot;">​</a></h3><ul><li>1XX: 100 <code>continue</code> 101 <code>http -&gt;websocket</code> 请求服务器切换更高的协议</li><li>2XX: 200 ok 204 只有响应头无body 206: <code>partial content</code> HTTP1.1 断点续传、分块下载</li><li>3XX：301 永久重定向 302 暂时重定向 304 缓存</li><li>4XX：400 bad request 通用 403 禁止访问 404 无资源 405 <code>method not allowed</code></li><li>5XX: 500 服务器错误 501 不支持客户端请求 502 <code>bad gateway</code> 代理服务器异常 503 太多，无法响应</li></ul><h3 id="常见的传输格式内容" tabindex="-1">常见的传输格式内容 <a class="header-anchor" href="#常见的传输格式内容" aria-label="Permalink to &quot;常见的传输格式内容&quot;">​</a></h3><ol><li>传输定长、不定长数据</li></ol><ul><li>定长：Content-length，指定HTTP报文长度</li><li>不定长：Transfer-Encoding: chunked：表示分块传输，自动忽略Content-Length，建立长链接</li></ul><ol start="2"><li>处理大文件</li></ol><ul><li>Accept-Range: none，允许服务器只发送 HTTP 消息的一部分到客户端，服务器端会返回状态码为 206 Partial Content 的响应：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HTTP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 206</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Partial Content</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: bytes </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1023</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">146515</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(binary content)</span></span></code></pre></div><ol start="3"><li>常见表单</li></ol><ul><li>application/x-www-form-urlencoded：数据会URL编码</li><li>multipart/form-data：常用，不需要编码，每个表单元素独立</li></ul><h3 id="http-攻击" tabindex="-1">HTTP 攻击 <a class="header-anchor" href="#http-攻击" aria-label="Permalink to &quot;HTTP 攻击&quot;">​</a></h3><p><strong>SQL</strong></p><ul><li>通过将恶意的 Sql 查询或添加语句插入到应用的输入参数中</li><li>处理：对用户的输入进行转义</li></ul><p><strong>XSS：（Cross-site scripting）</strong></p><ul><li>存储型 XSS <ul><li>注入型脚本永久存储在目标服务器上。当浏览器请求数据时，脚本从服务器上传回并执行。</li></ul></li><li>反射型 XSS <ul><li>当用户点击一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。Web 服务器将注入脚本，比如一个错误信息，搜索结果等 返回到用户的浏览器上。由于浏览器认为这个响应来自&quot;可信任&quot;的服务器，所以会执行这段脚本。</li></ul></li><li>基于 DOM 的 XSS <ul><li>通过修改原始的客户端代码，受害者浏览器的 DOM 环境改变，导致有效载荷的执行。也就是说，页面本身并没有变化，但由于 DOM 环境被恶意修改，有客户端代码被包含进了页面，并且意外执行。</li></ul></li><li>处理：对用户的输入进行转义</li></ul><p>**CSRF：（Cross-site request forgery）跨站请求伪造：**攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p><ul><li>一个典型的CSRF攻击有着如下的流程： <ul><li>受害者登录a.com，并保留了登录凭证（Cookie）。</li><li>攻击者引诱受害者访问了b.com。</li><li>b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie。</li><li>a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。</li><li>a.com以受害者的名义执行了act=xx。</li><li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。</li></ul></li><li>处理：cookie samesite</li></ul><h3 id="http-版本" tabindex="-1">HTTP 版本 <a class="header-anchor" href="#http-版本" aria-label="Permalink to &quot;HTTP 版本&quot;">​</a></h3><h4 id="http-1-0" tabindex="-1">HTTP/1.0 <a class="header-anchor" href="#http-1-0" aria-label="Permalink to &quot;HTTP/1.0&quot;">​</a></h4><p><strong>特点</strong></p><ul><li>短连接：每个请求都需要建立一个新的 TCP 连接，请求完成后立即关闭连接。</li><li>无状态：服务器不会保存客户端的状态信息。</li><li>简单头部：只包含基本的头部字段，如 Content-Type、Content-Length 等。</li></ul><p><strong>缺点</strong></p><ul><li>性能差：每次请求都需要建立和关闭 TCP 连接，导致性能低下。</li><li>无持久连接：无法复用 TCP 连接，增加了延迟和开销。</li></ul><h4 id="http-1-1" tabindex="-1">HTTP/1.1 <a class="header-anchor" href="#http-1-1" aria-label="Permalink to &quot;HTTP/1.1&quot;">​</a></h4><p><strong>特点</strong></p><ul><li>持久连接：允许在同一个 TCP 连接上发送多个请求和响应，减少了连接建立和关闭的开销。</li><li>管道化请求：允许客户端在同一个连接上发送多个请求，服务器按顺序响应。</li><li>更多的头部字段：引入了更多的头部字段，如 Host、Cache-Control、ETag 等。</li></ul><p><strong>缺点</strong></p><ul><li>队头阻塞：虽然支持管道化请求，但仍然存在队头阻塞问题，即一个请求的延迟会影响后续请求。</li><li>头部冗余：每个请求和响应都需要发送完整的头部，导致头部冗余和带宽浪费。</li></ul><h4 id="http-2" tabindex="-1">HTTP/2 <a class="header-anchor" href="#http-2" aria-label="Permalink to &quot;HTTP/2&quot;">​</a></h4><p><strong>特点</strong></p><ul><li>多路复用：允许在同一个 TCP 连接上同时发送多个请求和响应，解决了队头阻塞问题。</li><li>头部压缩：使用 HPACK 算法压缩请求和响应头，减少了带宽消耗。</li><li>服务器推送：服务器可以主动推送资源给客户端，减少了客户端的请求次数。</li><li>二进制分帧：将请求和响应分成更小的二进制帧，提高了传输效率。</li></ul><p><strong>缺点</strong></p><ul><li>TCP 队头阻塞：虽然解决了 HTTP 层的队头阻塞问题，但仍然存在 TCP 层的队头阻塞问题。</li><li>复杂性增加：引入了更多的特性和机制，增加了协议的复杂性。</li></ul><h4 id="http-3" tabindex="-1">HTTP/3 <a class="header-anchor" href="#http-3" aria-label="Permalink to &quot;HTTP/3&quot;">​</a></h4><p><strong>特点</strong></p><ul><li>基于 UDP：使用 UDP 协议，减少了连接建立的延迟。</li><li>快速重连：在网络切换时，能够快速恢复连接。</li><li>内置加密：QUIC 协议内置了加密机制，提供更安全的通信。</li><li>多路复用：在 QUIC 层实现了多路复用，解决了 TCP 层的队头阻塞问题。</li></ul><p><strong>缺点</strong></p><ul><li>兼容性：由于基于 UDP，可能存在一些网络环境不支持 UDP 的情况。</li><li>部署难度：需要服务器和客户端的支持，部署难度较大。</li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p><strong>HTTP/1.0</strong>：基本的请求-响应模型，短连接，无状态，性能差。 <strong>HTTP/1.1</strong>：引入持久连接和管道化请求，提升了性能，但存在队头阻塞和头部冗余问题。 <strong>HTTP/2</strong>：多路复用、头部压缩和服务器推送，解决了 HTTP 层的队头阻塞问题，但仍然存在 TCP 层的队头阻塞问题。 <strong>HTTP/3</strong>：基于 QUIC 协议，解决了 TCP 层的队头阻塞问题，提供更快的连接建立和更安全的通信，但兼容性和部署难度较大。</p><h2 id="dns" tabindex="-1">DNS <a class="header-anchor" href="#dns" aria-label="Permalink to &quot;DNS&quot;">​</a></h2><p><strong>DNS：将主机名转为具体IP的服务</strong><strong>根域</strong>：就是一个“.”号，由Internet名字注册授权机构管理。全世界共有13台根域服务器。 <strong>顶级域</strong>：由Internet名字授权机构管理。共有3种类型的顶级域： <strong>组织域</strong>：采用3个字符的代号，如edu、com、gov等。 <strong>地理域</strong>：采用2个字符的国家/地区代号，如cn、jp、hk等。 <strong>反向域</strong>：这是一个特殊域，名称为in-addr.arpa，用于将IP映射到域名。 <strong>二级域</strong>：注册到个人、组织或公司的名称。二级域下还可以创建子域。 <strong>主机名</strong>：就是FQDN最左边的部分。使用“hostname”命令可以显示当前主机名。</p><p><strong>操作过程</strong>：递归查询，优先查找是否有DNS缓存 <img src="`+h+'" alt=""></p>',85),g=[c];function P(T,u,k,C,b,m){return l(),i("div",null,g)}const y=t(d,[["render",P]]);export{_ as __pageData,y as default};
