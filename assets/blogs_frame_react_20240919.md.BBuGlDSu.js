import{_ as e,c as i,o as a,a5 as l}from"./chunks/framework.Bx-mEslM.js";const g=JSON.parse('{"title":"跟着卡颂从0实现React","description":"","frontmatter":{"title":"跟着卡颂从0实现React","date":"2024-9-19","categories":["react"]},"headers":[],"relativePath":"blogs/frame/react/20240919.md","filePath":"blogs/frame/react/20240919.md"}'),t={name:"blogs/frame/react/20240919.md"},o=l(`<h2 id="项目架构" tabindex="-1">项目架构 <a class="header-anchor" href="#项目架构" aria-label="Permalink to &quot;项目架构&quot;">​</a></h2><h3 id="包管理器" tabindex="-1">包管理器 <a class="header-anchor" href="#包管理器" aria-label="Permalink to &quot;包管理器&quot;">​</a></h3><p>使用 pnpm 作为包管理器，速度快，并且解决幽灵依赖的问题。</p><p><code>pnpm-workspace.yaml</code> 文件是 pnpm 工作区（workspace）的配置文件。pnpm 是一个快速、节省磁盘空间的包管理器，支持 monorepo（单体仓库）项目结构。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;packages/*&#39;</span></span></code></pre></div><p>这个配置文件的作用是告诉 pnpm，所有位于 packages 目录下的子目录都应该被视为工作区的一部分。</p><p><strong>使用工作区的优势</strong></p><ol><li><p><strong>共享依赖</strong>: 所有包的依赖会被安装在根目录下的 <code>node_modules</code> 中，而不是每个包的 <code>node_modules</code> 中，从而节省磁盘空间。</p></li><li><p><strong>统一管理</strong>:</p></li></ol><ul><li>你可以一次性安装所有包的依赖：<code>pnpm install</code></li><li>通过工作区配置，你可以统一管理多个包的依赖、脚本和版本：<code>pnpm run build --filter &quot;packages/*&quot;</code></li></ul><h3 id="定义开发规范" tabindex="-1">定义开发规范 <a class="header-anchor" href="#定义开发规范" aria-label="Permalink to &quot;定义开发规范&quot;">​</a></h3><h4 id="代码规范" tabindex="-1">代码规范 <a class="header-anchor" href="#代码规范" aria-label="Permalink to &quot;代码规范&quot;">​</a></h4><ul><li>ESLint 设置 <ul><li>安装 ESLint：<code>pnpm add -D -w eslint</code></li><li>初始化 ESLint 配置：<code>npx eslint --init</code></li><li>注意这里安装到根目录需要加上 <code>-w</code></li></ul></li></ul><h3 id="代码格式化" tabindex="-1">代码格式化 <a class="header-anchor" href="#代码格式化" aria-label="Permalink to &quot;代码格式化&quot;">​</a></h3><ul><li>Prettier 设置 <ul><li>安装 Prettier：<code>pnpm add -D -w prettier</code></li><li>创建 .prettierrc 配置文件</li><li>安装 ESLint 和 Prettier 的集成插件：<code>pnpm add -D -w eslint-config-prettier eslint-plugin-prettier</code></li></ul></li></ul><h3 id="commit-规范" tabindex="-1">commit 规范 <a class="header-anchor" href="#commit-规范" aria-label="Permalink to &quot;commit 规范&quot;">​</a></h3><ul><li>使用 husky 和 lint-staged 实现 <ul><li>安装 commitlint：<code>pnpm add -D -w @commitlint/cli @commitlint/config-conventional</code></li><li>创建 commitlint.config.js 文件</li><li>安装 husky 用于 Git hooks：p<code>npm add -D -w husky</code></li><li>设置 pre-commit 和 commit-msg hooks</li></ul></li></ul><h3 id="添加-ignore" tabindex="-1">添加 ignore <a class="header-anchor" href="#添加-ignore" aria-label="Permalink to &quot;添加 ignore&quot;">​</a></h3><ul><li>设置 <code>.gitignore</code> 文件，确保敏感信息不被提交</li><li>考虑使用 <code>.npmignore</code> 文件（如果需要发布到 npm）</li></ul><h3 id="更新日志以及文档-按需" tabindex="-1">更新日志以及文档(按需) <a class="header-anchor" href="#更新日志以及文档-按需" aria-label="Permalink to &quot;更新日志以及文档(按需)&quot;">​</a></h3><ul><li>创建 CHANGELOG.md 文件，记录版本更新信息</li><li>创建 README.md 文件，包含项目描述、安装和使用说明</li><li>考虑使用文档生成工具（如 JSDoc, TypeDoc 等）</li></ul>`,20),n=[o];function s(r,c,d,p,h,m){return a(),i("div",null,n)}const k=e(t,[["render",s]]);export{g as __pageData,k as default};
