import{_ as s,c as a,o as i,a3 as n}from"./chunks/framework.DpzXWsSh.js";const c=JSON.parse('{"title":"Axios中的query参数和params参数","description":"","frontmatter":{"title":"Axios中的query参数和params参数","date":"2023-5-7","categories":["浏览器","axios","踩坑"]},"headers":[],"relativePath":"blogs/word/2023/0507.md","filePath":"blogs/word/2023/0507.md"}'),p={name:"blogs/word/2023/0507.md"},l=n(`<p><strong>Axios 中，query 参数和 params 参数都是用来传递请求参数的，但是它们的作用和使用方式是不同的。</strong></p><h2 id="query参数" tabindex="-1">query参数 <a class="header-anchor" href="#query参数" aria-label="Permalink to &quot;query参数&quot;">​</a></h2><ol><li><p>query 参数<strong>通常用于 GET 请求</strong>，将参数附加到 URL 的末尾，形成像这样的 <code>URL：https://example.com/api?param1=value1&amp;param2=value2</code>。<strong>query 参数可以使用 Axios 的 params 配置属性来设置</strong>，通常需要进行<strong>URL 编码</strong>来避免特殊字符的问题。</p></li><li><p>以下是 GET 请求中使用 params 配置属性传递 query 参数的示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    params: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      param1: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      param2: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value2&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div></li><li><p>上面的代码会将 param1 和 param2 参数拼接到 URL 的末尾。</p></li></ol><h2 id="params-参数" tabindex="-1">params 参数 <a class="header-anchor" href="#params-参数" aria-label="Permalink to &quot;params 参数&quot;">​</a></h2><ol><li><p>params 参数<strong>通常用于 POST 请求</strong>，将参数包含在 HTTP 请求的主体部分中。<strong>这些参数不会出现在 URL 中，并且不受 URL 的长度限制</strong>。<strong>params 参数可以使用 Axios 的 data 配置属性来设置</strong>，通常需要进行序列化为字符串并设置请求头的 <code>Content-Type</code> 为 <code>application/x-www-form-urlencoded</code> 或者 <code>application/json</code>。</p></li><li><p>以下是 POST 请求中使用 data 配置属性传递 params 参数的示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      param1: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      param2: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value2&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //当然，如果你需要发送 JSON 格式的数据，你还可以这样：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      param1: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      param2: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value2&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span></code></pre></div></li><li><p>需要注意的是，在使用 Axios 时，请确保使用正确的参数类型来传递请求参数。如果混淆 query 和 params 参数，可能会导致请求失败或者请求结果不符合预期。</p></li></ol>`,5),t=[l];function e(h,k,r,E,o,d){return i(),a("div",null,t)}const y=s(p,[["render",e]]);export{c as __pageData,y as default};
