import{_ as s,c as i,o as a,a5 as n}from"./chunks/framework.Bx-mEslM.js";const c=JSON.parse('{"title":"前端登录方案详解 🔐","description":"","frontmatter":{"title":"前端登录方案详解 🔐","date":"2023-8-25","tags":null,"categories":["javascript","工作随记","面试"]},"headers":[],"relativePath":"blogs/word/2023/0825.md","filePath":"blogs/word/2023/0825.md"}'),l={name:"blogs/word/2023/0825.md"},h=n(`<h1 id="前端登录方案全解析-🌟" tabindex="-1">前端登录方案全解析 🌟 <a class="header-anchor" href="#前端登录方案全解析-🌟" aria-label="Permalink to &quot;前端登录方案全解析 🌟&quot;">​</a></h1><h2 id="_1-cookie-session-登录-🍪" tabindex="-1">1. Cookie + Session 登录 🍪 <a class="header-anchor" href="#_1-cookie-session-登录-🍪" aria-label="Permalink to &quot;1. Cookie + Session 登录 🍪&quot;">​</a></h2><h3 id="_1-1-基本概念" tabindex="-1">1.1 基本概念 <a class="header-anchor" href="#_1-1-基本概念" aria-label="Permalink to &quot;1.1 基本概念&quot;">​</a></h3><ul><li>HTTP 协议是无状态的，每次请求都是独立的</li><li>Cookie 是存储在客户端的小型文本数据</li><li>Session 是服务器端的会话存储机制</li></ul><h3 id="_1-2-工作流程-⚙️" tabindex="-1">1.2 工作流程 ⚙️ <a class="header-anchor" href="#_1-2-工作流程-⚙️" aria-label="Permalink to &quot;1.2 工作流程 ⚙️&quot;">​</a></h3><ol><li>用户登录提交账号密码</li><li>服务器验证通过后创建 SessionId</li><li>服务器通过 Set-Cookie 响应头将 SessionId 写入客户端 Cookie</li><li>后续请求自动携带 Cookie 实现身份验证</li></ol><h3 id="_1-3-代码示例" tabindex="-1">1.3 代码示例 <a class="header-anchor" href="#_1-3-代码示例" aria-label="Permalink to &quot;1.3 代码示例&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 服务器端示例 (Express)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.body;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (验证通过) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        req.session.userId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.id; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置 Session</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sessionId&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, req.session.id, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            httpOnly: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            secure: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            sameSite: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;strict&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ success: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="_1-4-存在的问题-⚠️" tabindex="-1">1.4 存在的问题 ⚠️ <a class="header-anchor" href="#_1-4-存在的问题-⚠️" aria-label="Permalink to &quot;1.4 存在的问题 ⚠️&quot;">​</a></h3><ol><li>服务器需存储大量 Session，增加服务器负载</li><li>集群环境下 Session 同步困难</li><li>容易遭受 CSRF 攻击</li></ol><h2 id="_2-token-登录-🎟️" tabindex="-1">2. Token 登录 🎟️ <a class="header-anchor" href="#_2-token-登录-🎟️" aria-label="Permalink to &quot;2. Token 登录 🎟️&quot;">​</a></h2><h3 id="_2-1-jwt-json-web-token-实现" tabindex="-1">2.1 JWT (JSON Web Token) 实现 <a class="header-anchor" href="#_2-1-jwt-json-web-token-实现" aria-label="Permalink to &quot;2.1 JWT (JSON Web Token) 实现&quot;">​</a></h3><ul><li>Header: 声明加密算法</li><li>Payload: 存储用户信息</li><li>Signature: 签名确保数据完整性</li></ul><h3 id="_2-2-工作流程-⚙️" tabindex="-1">2.2 工作流程 ⚙️ <a class="header-anchor" href="#_2-2-工作流程-⚙️" aria-label="Permalink to &quot;2.2 工作流程 ⚙️&quot;">​</a></h3><ol><li>用户登录成功后服务器生成 Token</li><li>客户端存储 Token（localStorage/内存）</li><li>请求时在 Authorization 头携带 Token</li></ol><h3 id="_2-3-代码示例" tabindex="-1">2.3 代码示例 <a class="header-anchor" href="#_2-3-代码示例" aria-label="Permalink to &quot;2.3 代码示例&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 服务器端生成 JWT</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> jwt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jsonwebtoken&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jwt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { userId: user.id },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;secret_key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { expiresIn: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;24h&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 前端使用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存储 Token</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;token&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, token);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// API 请求</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;Authorization&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Bearer \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localStorage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getItem</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;token&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="_2-4-优势与注意事项-📝" tabindex="-1">2.4 优势与注意事项 📝 <a class="header-anchor" href="#_2-4-优势与注意事项-📝" aria-label="Permalink to &quot;2.4 优势与注意事项 📝&quot;">​</a></h3><ul><li>✅ 服务器无状态，易于扩展</li><li>✅ 可跨域使用</li><li>⚠️ Token 无法主动废除</li><li>⚠️ 需注意 Token 的安全存储</li></ul><h2 id="_3-sso-单点登录-🔑" tabindex="-1">3. SSO 单点登录 🔑 <a class="header-anchor" href="#_3-sso-单点登录-🔑" aria-label="Permalink to &quot;3. SSO 单点登录 🔑&quot;">​</a></h2><h3 id="_3-1-实现要点" tabindex="-1">3.1 实现要点 <a class="header-anchor" href="#_3-1-实现要点" aria-label="Permalink to &quot;3.1 实现要点&quot;">​</a></h3><ul><li>统一的认证中心</li><li>共享的登录状态</li><li>多系统间的通信机制</li></ul><h3 id="_3-2-最佳实践-💡" tabindex="-1">3.2 最佳实践 💡 <a class="header-anchor" href="#_3-2-最佳实践-💡" aria-label="Permalink to &quot;3.2 最佳实践 💡&quot;">​</a></h3><ol><li>使用 HTTPS 确保传输安全</li><li>实现统一的登出机制</li><li>注意 Cookie 的域名设置</li></ol><h3 id="_3-3-示例流程图" tabindex="-1">3.3 示例流程图 <a class="header-anchor" href="#_3-3-示例流程图" aria-label="Permalink to &quot;3.3 示例流程图&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    用户-&gt;&gt;系统A: 访问</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    系统A-&gt;&gt;SSO中心: 重定向</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SSO中心--&gt;&gt;用户: 登录页面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    用户-&gt;&gt;SSO中心: 提交凭证</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SSO中心--&gt;&gt;系统A: 返回票据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    系统A-&gt;&gt;用户: 登录成功</span></span></code></pre></div><h2 id="_4-oauth-第三方登录-🌐" tabindex="-1">4. OAuth 第三方登录 🌐 <a class="header-anchor" href="#_4-oauth-第三方登录-🌐" aria-label="Permalink to &quot;4. OAuth 第三方登录 🌐&quot;">​</a></h2><h3 id="_4-1-主流平台支持" tabindex="-1">4.1 主流平台支持 <a class="header-anchor" href="#_4-1-主流平台支持" aria-label="Permalink to &quot;4.1 主流平台支持&quot;">​</a></h3><ul><li>微信 📱</li><li>GitHub 💻</li><li>Google 🔍</li><li>Facebook 👥</li></ul><h3 id="_4-2-安全建议-🛡️" tabindex="-1">4.2 安全建议 🛡️ <a class="header-anchor" href="#_4-2-安全建议-🛡️" aria-label="Permalink to &quot;4.2 安全建议 🛡️&quot;">​</a></h3><ol><li>务必在服务器端验证 OAuth 回调</li><li>使用 state 参数防止 CSRF</li><li>妥善保管 appId 和 secret</li><li>实现用户授权范围控制</li></ol><h3 id="_4-3-示例代码" tabindex="-1">4.3 示例代码 <a class="header-anchor" href="#_4-3-示例代码" aria-label="Permalink to &quot;4.3 示例代码&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OAuth 2.0 回调处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/oauth/callback&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.query;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 验证 state 防止 CSRF</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.session.oauthState) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">403</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ error: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;非法请求&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用 code 换取 access_token</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAccessToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 获取用户信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> userInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(token);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 处理登录...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="总结-📝" tabindex="-1">总结 📝 <a class="header-anchor" href="#总结-📝" aria-label="Permalink to &quot;总结 📝&quot;">​</a></h2><p>选择合适的登录方案需要考虑：</p><ol><li>系统规模和用户量</li><li>安全性要求</li><li>跨域需求</li><li>维护成本</li></ol><p>建议：</p><ul><li>小型项目：Token + localStorage</li><li>大型单体应用：Session + Cookie</li><li>微服务架构：SSO + JWT</li><li>开放平台：OAuth 2.0</li></ul>`,38),t=[h];function e(k,p,r,E,d,o){return a(),i("div",null,t)}const y=s(l,[["render",e]]);export{c as __pageData,y as default};
