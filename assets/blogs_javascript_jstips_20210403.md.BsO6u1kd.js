import{_ as s,c as i,o as a,a5 as l}from"./chunks/framework.BIhQMg0k.js";const n="/assets/01pic.D0sFbVvU.png",y=JSON.parse('{"title":"JavaScript中的赋值运算陷阱详解","description":"","frontmatter":{"title":"JavaScript中的赋值运算陷阱详解","date":"2021-4-03","categories":["javascript"]},"headers":[],"relativePath":"blogs/javascript/jstips/20210403.md","filePath":"blogs/javascript/jstips/20210403.md"}'),h={name:"blogs/javascript/jstips/20210403.md"},t=l(`<h1 id="javascript中的赋值运算陷阱详解-🎯" tabindex="-1">JavaScript中的赋值运算陷阱详解 🎯 <a class="header-anchor" href="#javascript中的赋值运算陷阱详解-🎯" aria-label="Permalink to &quot;JavaScript中的赋值运算陷阱详解 🎯&quot;">​</a></h1><h2 id="一个经典的赋值问题-🤔" tabindex="-1">一个经典的赋值问题 🤔 <a class="header-anchor" href="#一个经典的赋值问题-🤔" aria-label="Permalink to &quot;一个经典的赋值问题 🤔&quot;">​</a></h2><p>让我们看一个经典的 JavaScript 赋值运算示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    n: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    n: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a.x)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b.x)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {n: 2}</span></span></code></pre></div><p>很多开发者可能会对这个输出结果感到困惑。要理解这个问题，我们需要深入了解 JavaScript 的赋值运算机制。</p><h2 id="赋值运算的核心原理-⚙️" tabindex="-1">赋值运算的核心原理 ⚙️ <a class="header-anchor" href="#赋值运算的核心原理-⚙️" aria-label="Permalink to &quot;赋值运算的核心原理 ⚙️&quot;">​</a></h2><p>JavaScript 中的赋值运算遵循以下步骤：</p><ol><li>📍 找到待赋值变量的内存地址（左侧引用）</li><li>🔄 计算右侧表达式的值</li><li>✍️ 将右侧的值存入左侧的内存地址</li><li>📤 返回右侧的值作为整个表达式的结果</li></ol><h2 id="示例详细解析-🔍" tabindex="-1">示例详细解析 🔍 <a class="header-anchor" href="#示例详细解析-🔍" aria-label="Permalink to &quot;示例详细解析 🔍&quot;">​</a></h2><p>让我们一步步分析上面的例子：</p><ol><li><p>初始状态：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { n: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此时 a 和 b 指向同一个对象</span></span></code></pre></div></li><li><p>执行 <code>a.x = a = { n: 2 }</code> 时：</p><ul><li>首先确定 <code>a.x</code> 的引用（此时 a 还是指向 <code>{n: 1}</code> 的对象）</li><li>计算右侧表达式 <code>a = {n: 2}</code></li><li>将 <code>{n: 2}</code> 赋值给之前找到的 <code>a.x</code> 引用</li></ul></li></ol><h2 id="内存图解-📊" tabindex="-1">内存图解 📊 <a class="header-anchor" href="#内存图解-📊" aria-label="Permalink to &quot;内存图解 📊&quot;">​</a></h2><p><img src="`+n+`" alt="JavaScript赋值运算内存图"></p><h2 id="更多注意事项-⚠️" tabindex="-1">更多注意事项 ⚠️ <a class="header-anchor" href="#更多注意事项-⚠️" aria-label="Permalink to &quot;更多注意事项 ⚠️&quot;">​</a></h2><ol><li>连续赋值的陷阱：</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 要小心这种写法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 相当于：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// y 会变成全局变量（在非严格模式下）</span></span></code></pre></div><ol start="2"><li>解构赋值的注意事项：</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: c } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, c)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1, 2</span></span></code></pre></div><h2 id="最佳实践建议-💡" tabindex="-1">最佳实践建议 💡 <a class="header-anchor" href="#最佳实践建议-💡" aria-label="Permalink to &quot;最佳实践建议 💡&quot;">​</a></h2><ol><li>避免在一行中进行复杂的多重赋值</li><li>使用 <code>const</code> 和 <code>let</code> 替代 <code>var</code></li><li>对象赋值时注意引用关系</li><li>使用解构赋值来简化代码</li></ol><h2 id="总结-📝" tabindex="-1">总结 📝 <a class="header-anchor" href="#总结-📝" aria-label="Permalink to &quot;总结 📝&quot;">​</a></h2><p>理解 JavaScript 的赋值运算机制对于编写可靠的代码至关重要。通过掌握赋值运算的执行顺序和内存引用机制，我们可以避免相关的陷阱，写出更加可靠的代码。</p><p>记住：</p><ul><li>赋值运算总是从右向左执行</li><li>注意对象引用的变化</li><li>理解内存地址和引用的概念</li></ul>`,24),p=[t];function e(k,r,d,E,o,c){return a(),i("div",null,p)}const u=s(h,[["render",e]]);export{y as __pageData,u as default};
