import{_ as s,c as i,o as a,a7 as n}from"./chunks/framework.DLSH1pMh.js";const g=JSON.parse('{"title":"深入理解 JavaScript 中的 undefined","description":"","frontmatter":{"title":"深入理解 JavaScript 中的 undefined","date":"2020-02-06T00:00:00.000Z","categories":["javascript"]},"headers":[],"relativePath":"blogs/javascript/jstips/20200206.md","filePath":"blogs/javascript/jstips/20200206.md"}'),e={name:"blogs/javascript/jstips/20200206.md"},l=n(`<h2 id="为什么不推荐直接赋值-undefined-🤔" tabindex="-1">为什么不推荐直接赋值 undefined? 🤔 <a class="header-anchor" href="#为什么不推荐直接赋值-undefined-🤔" aria-label="Permalink to &quot;为什么不推荐直接赋值 undefined? 🤔&quot;">​</a></h2><p>在 JavaScript 中，<code>undefined</code> 是一个比较特殊的值，我们需要正确理解和使用它。</p><h3 id="_1-undefined-的本质-📝" tabindex="-1">1. undefined 的本质 📝 <a class="header-anchor" href="#_1-undefined-的本质-📝" aria-label="Permalink to &quot;1. undefined 的本质 📝&quot;">​</a></h3><ul><li><code>undefined</code> 实际上不是 JavaScript 的关键字</li><li>它是全局对象(<code>window</code>/<code>global</code>)的一个属性</li><li>在早期 JavaScript 版本中，<code>undefined</code> 是可以被重新赋值的，这是一个历史遗留的设计缺陷</li></ul><h3 id="_2-潜在风险-⚠️" tabindex="-1">2. 潜在风险 ⚠️ <a class="header-anchor" href="#_2-潜在风险-⚠️" aria-label="Permalink to &quot;2. 潜在风险 ⚠️&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在非严格模式下，以下代码在早期是可行的</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这可能改变 undefined 的值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> undefined </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以声明 undefined 变量</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这会导致意外的行为</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可能不再可靠</span></span></code></pre></div><h3 id="_3-最佳实践-✅" tabindex="-1">3. 最佳实践 ✅ <a class="header-anchor" href="#_3-最佳实践-✅" aria-label="Permalink to &quot;3. 最佳实践 ✅&quot;">​</a></h3><p>推荐使用 <code>void</code> 操作符来获取 <code>undefined</code> 值：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 推荐的方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 始终返回 undefined</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 括号是可选的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;any value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 任何值都会返回 undefined</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不推荐的方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不够安全</span></span></code></pre></div><h3 id="_4-现代-javascript-中的保护机制-🛡️" tabindex="-1">4. 现代 JavaScript 中的保护机制 🛡️ <a class="header-anchor" href="#_4-现代-javascript-中的保护机制-🛡️" aria-label="Permalink to &quot;4. 现代 JavaScript 中的保护机制 🛡️&quot;">​</a></h3><p>在现代 JavaScript 中（ES5+）：</p><ul><li>在严格模式下，<code>undefined</code> 是不可写的</li><li>大多数现代浏览器已经将 <code>undefined</code> 设置为不可配置且不可写</li><li>但为了代码的可靠性和兼容性，仍建议使用 <code>void 0</code></li></ul><h3 id="_5-检测-undefined-的方法-🔍" tabindex="-1">5. 检测 undefined 的方法 🔍 <a class="header-anchor" href="#_5-检测-undefined-的方法-🔍" aria-label="Permalink to &quot;5. 检测 undefined 的方法 🔍&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 推荐的检测方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkUndefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 typeof</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;undefined&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 void 0 比较</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_6-注意事项-📌" tabindex="-1">6. 注意事项 📌 <a class="header-anchor" href="#_6-注意事项-📌" aria-label="Permalink to &quot;6. 注意事项 📌&quot;">​</a></h3><ul><li>永远不要使用 <code>undefined</code> 作为变量名或函数名</li><li>在函数参数默认值中，可以安全使用 <code>undefined</code></li><li>在现代开发中，推荐使用 TypeScript 等工具来避免 <code>undefined</code> 相关的类型问题</li></ul><p>通过正确理解和使用 <code>undefined</code>，我们可以写出更可靠、更健壮的 JavaScript 代码。</p>`,17),h=[l];function t(p,k,d,r,c,E){return a(),i("div",null,h)}const y=s(e,[["render",t]]);export{g as __pageData,y as default};
