import{_ as l,c as i,o as e,a3 as r}from"./chunks/framework.DpzXWsSh.js";const h=JSON.parse('{"title":"CSR、SSR、SSG 对比与实践指南 🚀","description":"","frontmatter":{"title":"CSR、SSR、SSG 对比与实践指南 🚀","date":"2024-12-06T00:00:00.000Z","categories":["工程化","面试"]},"headers":[],"relativePath":"blogs/engineering/20241206.md","filePath":"blogs/engineering/20241206.md"}'),t={name:"blogs/engineering/20241206.md"},o=r('<h2 id="什么是-csr、ssr-和-ssg" tabindex="-1">什么是 CSR、SSR 和 SSG？ <a class="header-anchor" href="#什么是-csr、ssr-和-ssg" aria-label="Permalink to &quot;什么是 CSR、SSR 和 SSG？&quot;">​</a></h2><p>在现代 Web 开发中，CSR（客户端渲染）、SSR（服务器端渲染）和 SSG（静态站点生成）是三种常见的渲染方式。每种方式都有其独特的优缺点和适用场景。</p><h3 id="ssr-全流程详解" tabindex="-1">SSR 全流程详解 <a class="header-anchor" href="#ssr-全流程详解" aria-label="Permalink to &quot;SSR 全流程详解&quot;">​</a></h3><ol><li><p><strong>请求到达服务器</strong>：</p><ul><li>用户在浏览器中输入 URL 或点击链接，HTTP 请求被发送到服务器。</li></ul></li><li><p><strong>服务器接收请求</strong>：</p><ul><li>服务器接收到请求后，通常会通过一个 Node.js 服务器（如 Express）来处理请求。</li></ul></li><li><p><strong>初始化应用程序</strong>：</p><ul><li>服务器会创建一个新的 Vue 实例（或其他框架的实例，如 React、Angular）来处理请求。</li><li>在这个阶段，应用程序的所有逻辑都会被执行，包括数据获取、路由解析等。</li></ul></li><li><p><strong>数据获取</strong>：</p><ul><li>服务器会根据请求的 URL 获取所需的数据。这通常涉及到调用 API 或查询数据库。</li><li>获取的数据会被注入到 Vue 实例中，以便在渲染时使用。</li></ul></li><li><p><strong>组件渲染</strong>：</p><ul><li>服务器使用 Vue 的 SSR API（如 <code>vue-server-renderer</code>）将 Vue 组件渲染为 HTML 字符串。</li><li>在这个过程中，Vue 会执行组件的生命周期钩子（如 <code>created</code> 和 <code>beforeMount</code>），但不会执行 <code>mounted</code> 及其后的钩子，因为这些钩子依赖于 DOM。</li></ul></li><li><p><strong>生成完整的 HTML</strong>：</p><ul><li>服务器将渲染的 HTML 字符串插入到一个完整的 HTML 模板中。</li><li>这个模板通常包含基本的 HTML 结构、CSS 链接、JavaScript 脚本等。</li></ul></li><li><p><strong>发送响应</strong>：</p><ul><li>服务器将生成的完整 HTML 发送回客户端。</li></ul></li><li><p><strong>客户端接收 HTML</strong>：</p><ul><li>浏览器接收到 HTML 后，立即显示页面内容。</li><li>这使得用户可以快速看到页面的初始内容，而不需要等待 JavaScript 加载和执行。</li></ul></li><li><p><strong>客户端激活（Hydration）</strong>：</p><ul><li>浏览器下载并执行 JavaScript 文件。</li><li>Vue（或其他框架）会接管已经渲染的 HTML，并将其转换为一个可交互的应用程序。</li><li>这个过程称为“激活”或“hydration”，它将静态的 HTML 转换为动态的、可交互的 Vue 应用。</li></ul></li><li><p><strong>后续交互</strong>：</p><ul><li>一旦激活完成，应用程序的后续交互（如点击事件、表单提交等）将由客户端 JavaScript 处理。</li><li>这与传统的客户端渲染应用程序的行为相同。</li></ul></li></ol><h3 id="ssr-的优缺点" tabindex="-1">SSR 的优缺点 <a class="header-anchor" href="#ssr-的优缺点" aria-label="Permalink to &quot;SSR 的优缺点&quot;">​</a></h3><p><strong>优点</strong>：</p><ul><li>更快的首屏加载：因为初始 HTML 是在服务器上生成的，用户可以更快地看到页面内容。</li><li>更好的 SEO：搜索引擎可以更容易地抓取和索引页面内容，因为它们不需要执行 JavaScript 来获取页面内容。</li></ul><p><strong>缺点</strong>：</p><ul><li>服务器负载增加：服务器需要为每个请求生成 HTML，这可能会增加服务器的负载。</li><li>开发复杂性：SSR 需要处理更多的边界情况（如 <code>window</code> 对象的使用），这可能会增加开发的复杂性。</li></ul><h3 id="其他渲染方式的对比" tabindex="-1">其他渲染方式的对比 <a class="header-anchor" href="#其他渲染方式的对比" aria-label="Permalink to &quot;其他渲染方式的对比&quot;">​</a></h3><ul><li><p><strong>CSR（客户端渲染）</strong>：</p><ul><li>优点：更少的服务器负载，适合动态交互丰富的应用。</li><li>缺点：首屏加载时间较长，SEO 友好性较差。</li></ul></li><li><p><strong>SSG（静态站点生成）</strong>：</p><ul><li>优点：极快的加载速度，适合内容不常变化的网站。</li><li>缺点：不适合需要频繁更新内容的应用。</li></ul></li></ul><h3 id="实践建议" tabindex="-1">实践建议 <a class="header-anchor" href="#实践建议" aria-label="Permalink to &quot;实践建议&quot;">​</a></h3><ul><li><strong>选择合适的渲染方式</strong>：根据项目需求选择合适的渲染方式。对于需要快速首屏加载和良好 SEO 的项目，SSR 是一个不错的选择。</li><li><strong>优化服务器性能</strong>：使用缓存、CDN 等技术来减轻服务器负载。</li><li><strong>关注开发体验</strong>：使用现代框架（如 Next.js、Nuxt.js）来简化 SSR 的开发流程。</li></ul>',13),s=[o];function a(n,u,S,c,g,p){return e(),i("div",null,s)}const _=l(t,[["render",a]]);export{h as __pageData,_ as default};
