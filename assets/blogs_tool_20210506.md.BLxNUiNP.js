import{_ as i,c as l,o as s,a3 as t}from"./chunks/framework.DpzXWsSh.js";const e="/assets/01.CdZreFH0.jpg",a="/assets/02.DPA33As3.jpg",o="/assets/03._JpkEEQ4.jpg",c="/assets/04.DSdyrQCr.jpg",n="/assets/05.CK7tDGxs.jpg",d="/assets/06.eB5ZQ-00.jpg",h="/assets/07.CfTGG_PB.jpg",r="/assets/08.DAD2glbW.jpg",g="/assets/09.obs5CWVu.jpg",A=JSON.parse('{"title":"Git基本使用和常见命令行","description":"","frontmatter":{"title":"Git基本使用和常见命令行","date":"2021-5-06","categories":["工程化","git","工具轮子"]},"headers":[],"relativePath":"blogs/tool/20210506.md","filePath":"blogs/tool/20210506.md"}'),p={name:"blogs/tool/20210506.md"},u=t('<h2 id="git基本使用和常见命令行" tabindex="-1">Git基本使用和常见命令行 <a class="header-anchor" href="#git基本使用和常见命令行" aria-label="Permalink to &quot;Git基本使用和常见命令行&quot;">​</a></h2><p>原文：<a href="https://juejin.cn/post/6869519303864123399" target="_blank" rel="noreferrer"></a></p><h3 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h3><p>基于上面的图，我们就有接下来一些概念<br><img src="'+e+'" alt=""><br><img src="'+a+'" alt=""></p><ul><li>版本库 <code>.git</code><ul><li>当我们使用git管理文件时，比如<code>git init</code>时，这个时候，会多一个<code>.git</code>文件，我们把这个文件称之为版本库。</li><li><code>.git</code>文件另外一个作用就是它在创建的时候，会自动创建<code>master</code>分支，并且将<code>HEAD</code>指针指向<code>master</code>分支。</li></ul></li><li>工作区 <ul><li>本地项目存放文件的位置</li><li>可以理解成图上的workspace</li></ul></li><li>暂存区 (Index/Stage) <ul><li>顾名思义就是暂时存放文件的地方，通过是通过add命令将工作区的文件添加到缓冲区</li></ul></li><li>本地仓库（Repository） <ul><li>通常情况下，我们使用commit命令可以将暂存区的文件添加到本地仓库</li><li>通常而言，HEAD指针指向的就是master分支</li></ul></li><li>远程仓库（Remote） <ul><li>举个例子，当我们使用GitHub托管我们项目时，它就是一个远程仓库。</li><li>通常我们使用clone命令将远程仓库代码拷贝下来，本地代码更新后，通过push托送给远程仓库。</li></ul></li></ul><h3 id="git使用流程" tabindex="-1">Git使用流程 <a class="header-anchor" href="#git使用流程" aria-label="Permalink to &quot;Git使用流程&quot;">​</a></h3><ol><li>创建本地仓库 <code>git init</code></li><li>链接本地仓库与远端仓库 <ul><li><code>git remote add origin</code></li><li>origin默认是远端仓库别名 url 可以是可以使用https或者ssh的方式新建</li></ul></li><li>检查配置信息 <ul><li><code>git config --list</code></li></ul></li><li><code>Git user name</code> 与<code>email</code><ul><li><code>git config --global user.name &quot;yourname&quot;</code></li><li><code>git config --global user.email &quot;your_email&quot;</code></li></ul></li><li>生成SSH密钥 <ul><li><code>ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</code></li><li><code>cd ~/.ssh</code> 里面有一个文件名为id_rsa.pub,把里面的内容复制到git库的我的SSHKEYs中</li></ul></li><li>常看远端仓库信息 <ul><li><code>git remote -v</code></li></ul></li><li>远端仓库重新命名 <ul><li><code>git remote rename old new</code></li></ul></li><li>提交到缓存区 <ul><li><code>git add .</code> 全部上传到缓存区</li><li><code>git add 指定文件</code></li></ul></li><li>提交到本地仓库 <ul><li><code>git commit -m &#39;some message&#39;</code></li></ul></li><li>提交远程仓库 <ul><li><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code></li></ul></li><li>查看分支 <code>git branch</code></li><li>创建并切换分支 <code>git checkout -b</code></li></ol><h3 id="git文件状态" tabindex="-1">Git文件状态 <a class="header-anchor" href="#git文件状态" aria-label="Permalink to &quot;Git文件状态&quot;">​</a></h3><p>通常我们需要查看一个文件的状态 <code>git status</code></p><ul><li><code>Changes not staged for commit</code><ul><li>表示得大概就是工作区有该内容，但是缓存区没有，需要我们git add</li></ul></li><li><code>Changes to be committed</code><ul><li>一般而言，这个时候，文件放在缓存区了，我们需要git commit</li></ul></li><li><code>nothing to commit, working tree clean</code><ul><li>这个时候，我们将本地的代码推送到远端即可</li></ul></li></ul><h3 id="常见命令" tabindex="-1">常见命令 <a class="header-anchor" href="#常见命令" aria-label="Permalink to &quot;常见命令&quot;">​</a></h3><ol><li>git配置命令<br><img src="'+o+'" alt=""></li><li>分支管理<br><img src="'+c+'" alt=""></li><li>fetch指令 <ul><li>将远程仓库内容更新到本地<br><img src="'+n+`" alt=""></li></ul><ol><li>fetch推荐写法</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    git fetch origin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">branch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local-branch-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>一般而言，这个origin是远程主机名，一般默认就是origin</li><li><code>branch-name</code> 你要拉取的分支</li><li><code>local-branch-name</code> 通常而言，就是你本地新建一个新分支，将origin下的某个分支代码下载到本地分支。<br> 举个例子</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  git fetch origin feature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">template_excellent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:feature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">template_layout</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 你的工作目录下，就会有feature/template_layout</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 一般情况下,我们需要做的就是在这个分支上开发新需求</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 完成代码后,我们需要做的就是上传我们的分支</span></span></code></pre></div><ol start="2"><li>fetch其他写法</li></ol><ul><li>将某个远程主机的更新，全部取回本地。<code>git fetch &lt;远程主机名&gt;</code></li><li>这样子的话，取回的是所有的分支更新，如果想取回特定分支，可以指定分支名<code>git fetch &lt;远程主机名&gt; &lt;分支名&gt;</code></li><li>当你想将某个分支的内容取回到本地下某个分支的话，如下<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  git fetch </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local-branch-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;   //等价于</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  git fetch origin master:&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local-branch-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul></li><li>花式撤销<br><img src="`+d+'" alt=""></li><li>文件暂存<br><img src="'+h+'" alt=""></li><li>差异比较<br><img src="'+r+'" alt=""></li><li>分支命名<br><img src="'+g+'" alt=""></li><li>状态查询 <ul><li>查看状态 <code>git status</code></li><li>查看历史操作记录 <code>git reflog</code></li><li>查看日志 <code>git log</code></li></ul></li><li>文档查询 <ul><li>展示Git命令大纲 <code>git help (--help)</code></li><li>展示Git命令大纲全部列表 <code>git help -a</code></li><li>展示具体命令说明手册 <code>git help</code></li></ul></li></ol>',12),k=[u];function m(E,_,b,y,f,C){return s(),l("div",null,k)}const v=i(p,[["render",m]]);export{A as __pageData,v as default};
